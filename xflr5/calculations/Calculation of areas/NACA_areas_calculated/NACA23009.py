
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
  (1.0000000, 0.0009450),
    (0.9974774, 0.0012658),
    (0.9929085, 0.0018446),
    (0.9870521, 0.0025827),
    (0.9801884, 0.0034421),
    (0.9724844, 0.0043998),
    (0.9640559, 0.0054391),
    (0.9549902, 0.0065475),
    (0.9453566, 0.0077145),
    (0.9352124, 0.0089317),
    (0.9246063, 0.0101917),
    (0.9135802, 0.0114881),
    (0.9021712, 0.0128153),
    (0.8904123, 0.0141684),
    (0.8783331, 0.0155429),
    (0.8659609, 0.0169347),
    (0.8533205, 0.0183403),
    (0.8404347, 0.0197562),
    (0.8273250, 0.0211794),
    (0.8140113, 0.0226070),
    (0.8005122, 0.0240363),
    (0.7868454, 0.0254648),
    (0.7730275, 0.0268902),
    (0.7590742, 0.0283102),
    (0.7450005, 0.0297228),
    (0.7308209, 0.0311258),
    (0.7165489, 0.0325172),
    (0.7021977, 0.0338953),
    (0.6877799, 0.0352581),
    (0.6733075, 0.0366038),
    (0.6587922, 0.0379307),
    (0.6442453, 0.0392370),
    (0.6296777, 0.0405209),
    (0.6150998, 0.0417809),
    (0.6005219, 0.0430151),
    (0.5859539, 0.0442220),
    (0.5714054, 0.0453999),
    (0.5568856, 0.0465471),
    (0.5424038, 0.0476621),
    (0.5279688, 0.0487432),
    (0.5135891, 0.0497889),
    (0.4992733, 0.0507975),
    (0.4850295, 0.0517676),
    (0.4708659, 0.0526977),
    (0.4567901, 0.0535863),
    (0.4428100, 0.0544318),
    (0.4289331, 0.0552330),
    (0.4151667, 0.0559884),
    (0.4015181, 0.0566967),
    (0.3879944, 0.0573567),
    (0.3746025, 0.0579671),
    (0.3613493, 0.0585267),
    (0.3482415, 0.0590346),
    (0.3352856, 0.0594895),
    (0.3224882, 0.0598907),
    (0.3098556, 0.0602372),
    (0.2973941, 0.0605282),
    (0.2851099, 0.0607630),
    (0.2730090, 0.0609409),
    (0.2610975, 0.0610614),
    (0.2493812, 0.0611241),
    (0.2378660, 0.0611285),
    (0.2265575, 0.0610744),
    (0.2154615, 0.0609616),
    (0.2045835, 0.0607900),
    (0.1939290, 0.0605579),
    (0.1835034, 0.0602522),
    (0.1733122, 0.0598567),
    (0.1633605, 0.0593574),
    (0.1536536, 0.0587430),
    (0.1441967, 0.0580046),
    (0.1349949, 0.0571352),
    (0.1260533, 0.0561305),
    (0.1173767, 0.0549879),
    (0.1089702, 0.0537070),
    (0.1008386, 0.0522891),
    (0.0929867, 0.0507375),
    (0.0854193, 0.0490569),
    (0.0781412, 0.0472536),
    (0.0711569, 0.0453352),
    (0.0644712, 0.0433106),
    (0.0580885, 0.0411895),
    (0.0520135, 0.0389828),
    (0.0462506, 0.0367020),
    (0.0408043, 0.0343592),
    (0.0356789, 0.0319670),
    (0.0308789, 0.0295381),
    (0.0264085, 0.0270854),
    (0.0222721, 0.0246219),
    (0.0184738, 0.0221602),
    (0.0150180, 0.0197126),
    (0.0119087, 0.0172910),
    (0.0091501, 0.0149065),
    (0.0067463, 0.0125696),
    (0.0047014, 0.0102897),
    (0.0030194, 0.0080753),
    (0.0017043, 0.0059338),
    (0.0007601, 0.0038711),
    (0.0001907, 0.0018921),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0017759),
    (0.0007601, -0.0034092),
    (0.0017043, -0.0049032),
    (0.0030194, -0.0062623),
    (0.0047014, -0.0074919),
    (0.0067463, -0.0085986),
    (0.0091501, -0.0095899),
    (0.0119087, -0.0104739),
    (0.0150180, -0.0112599),
    (0.0184738, -0.0119573),
    (0.0222721, -0.0125763),
    (0.0264085, -0.0131273),
    (0.0308789, -0.0136212),
    (0.0356789, -0.0140686),
    (0.0408043, -0.0144804),
    (0.0462506, -0.0148672),
    (0.0520135, -0.0152393),
    (0.0580885, -0.0156064),
    (0.0644712, -0.0159779),
    (0.0711569, -0.0163621),
    (0.0781412, -0.0167668),
    (0.0854193, -0.0171986),
    (0.0929867, -0.0176628),
    (0.1008386, -0.0181638),
    (0.1089702, -0.0187041),
    (0.1173767, -0.0192852),
    (0.1260533, -0.0199066),
    (0.1349949, -0.0205661),
    (0.1441967, -0.0212599),
    (0.1536536, -0.0219817),
    (0.1633605, -0.0227238),
    (0.1733122, -0.0234760),
    (0.1835034, -0.0242259),
    (0.1939290, -0.0249589),
    (0.2045835, -0.0256583),
    (0.2154615, -0.0263103),
    (0.2265575, -0.0269132),
    (0.2378660, -0.0274668),
    (0.2493812, -0.0279710),
    (0.2610975, -0.0284258),
    (0.2730090, -0.0288314),
    (0.2851099, -0.0291879),
    (0.2973941, -0.0294957),
    (0.3098556, -0.0297551),
    (0.3224882, -0.0299666),
    (0.3352856, -0.0301306),
    (0.3482415, -0.0302479),
    (0.3613493, -0.0303190),
    (0.3746025, -0.0303447),
    (0.3879944, -0.0303258),
    (0.4015181, -0.0302631),
    (0.4151667, -0.0301576),
    (0.4289331, -0.0300103),
    (0.4428100, -0.0298220),
    (0.4567901, -0.0295939),
    (0.4708659, -0.0293271),
    (0.4850295, -0.0290226),
    (0.4992733, -0.0286816),
    (0.5135891, -0.0283052),
    (0.5279688, -0.0278946),
    (0.5424038, -0.0274511),
    (0.5568856, -0.0269757),
    (0.5714054, -0.0264698),
    (0.5859539, -0.0259345),
    (0.6005219, -0.0253711),
    (0.6150998, -0.0247807),
    (0.6296777, -0.0241646),
    (0.6442453, -0.0235241),
    (0.6587922, -0.0228603),
    (0.6733075, -0.0221746),
    (0.6877799, -0.0214681),
    (0.7021977, -0.0207421),
    (0.7165489, -0.0199979),
    (0.7308209, -0.0192367),
    (0.7450005, -0.0184600),
    (0.7590742, -0.0176691),
    (0.7730275, -0.0168653),
    (0.7868454, -0.0160503),
    (0.8005122, -0.0152254),
    (0.8140113, -0.0143923),
    (0.8273250, -0.0135527),
    (0.8404347, -0.0127086),
    (0.8533205, -0.0118618),
    (0.8659609, -0.0110145),
    (0.8783331, -0.0101691),
    (0.8904123, -0.0093281),
    (0.9021712, -0.0084944),
    (0.9135802, -0.0076711),
    (0.9246063, -0.0068617),
    (0.9352124, -0.0060702),
    (0.9453566, -0.0053011),
    (0.9549902, -0.0045595),
    (0.9640559, -0.0038516),
    (0.9724844, -0.0031845),
    (0.9801884, -0.0025671),
    (0.9870521, -0.0020108),
    (0.9929085, -0.0015314),
    (0.9974774, -0.0011543),
    (1.0000000, -0.0009450)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# # Multiply all x and y values by the calculated factor
# x_values = [x * factor for x in x_values]
# y_values = [y * factor for y in y_values]

# modified_points = [(x, y) for x, y in zip(x_values, y_values)]

# # Generate more z values for smoother representation
# z_values = np.linspace(0, 6, 10000)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
# ax = fig.add_subplot(111, projection='3d')

# # Plot all (x, y) values for each z value
# for z in z_values:
#     ax.plot(x_values, y_values, z, marker='', linestyle='-')

# # Set plot title and labels
# ax.set_title('3D Plot of Points with Varying Z-values')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# ax.set_zlabel('Z-axis')

# # Set x-axis ticks and grid in increments of 0.01
# x_ticks = np.arange(0, 12.51, 0.5)
# ax.set_xticks(x_ticks)
# ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# # Set y-axis ticks and grid to match x-axis
# y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
# ax.set_yticks(y_ticks)
# ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# # Ensure equal aspect ratio
# ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# # Show the plot
# plt.show()

# def calculate_area(modified_points):
#     sum = 0
#     for i in range(len(modified_points)-1):
#          sum += sqrt((modified_points[i][0] - modified_points[i + 1][0])**2 + (modified_points[i][1] - modified_points[i + 1][1])**2)
#     area = sum * 150
#     return area

# # Calculate area
# area = calculate_area(modified_points)
# print("Area of the closed figure:", area)

#Calculus of thickness
max_y = max(y_values)*factor
min_y = min(y_values)*factor
thickness = max_y-min_y
print(thickness)
