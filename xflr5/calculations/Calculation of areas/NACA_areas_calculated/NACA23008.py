
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
  (1.0000000, 0.0008400),
  (0.9974774, 0.0011313),
  (0.9929085, 0.0016570),
  (0.9870521, 0.0023275),
  (0.9801884, 0.0031083),
  (0.9724844, 0.0039784),
  (0.9640559, 0.0049230),
  (0.9549902, 0.0059304),
  (0.9453566, 0.0069915),
  (0.9352124, 0.0080983),
  (0.9246063, 0.0092443),
  (0.9135802, 0.0104237),
  (0.9021712, 0.0116314),
  (0.8904123, 0.0128630),
  (0.8783331, 0.0141144),
  (0.8659609, 0.0153820),
  (0.8533205, 0.0166624),
  (0.8404347, 0.0179526),
  (0.8273250, 0.0192498),
  (0.8140113, 0.0205515),
  (0.8005122, 0.0218551),
  (0.7868454, 0.0231584),
  (0.7730275, 0.0244593),
  (0.7590742, 0.0257558),
  (0.7450005, 0.0270459),
  (0.7308209, 0.0283278),
  (0.7165489, 0.0295997),
  (0.7021977, 0.0308599),
  (0.6877799, 0.0321067),
  (0.6733075, 0.0333384),
  (0.6587922, 0.0345534),
  (0.6442453, 0.0357503),
  (0.6296777, 0.0369273),
  (0.6150998, 0.0380830),
  (0.6005219, 0.0392159),
  (0.5859539, 0.0403244),
  (0.5714054, 0.0414071),
  (0.5568856, 0.0424625),
  (0.5424038, 0.0434891),
  (0.5279688, 0.0444855),
  (0.5135891, 0.0454503),
  (0.4992733, 0.0463820),
  (0.4850295, 0.0472793),
  (0.4708659, 0.0481408),
  (0.4567901, 0.0489651),
  (0.4428100, 0.0497510),
  (0.4289331, 0.0504972),
  (0.4151667, 0.0512025),
  (0.4015181, 0.0518656),
  (0.3879944, 0.0524854),
  (0.3746025, 0.0530608),
  (0.3613493, 0.0535908),
  (0.3482415, 0.0540744),
  (0.3352856, 0.0545106),
  (0.3224882, 0.0548986),
  (0.3098556, 0.0552376),
  (0.2973941, 0.0555269),
  (0.2851099, 0.0557657),
  (0.2730090, 0.0559536),
  (0.2610975, 0.0560899),
  (0.2493812, 0.0561744),
  (0.2378660, 0.0562065),
  (0.2265575, 0.0561862),
  (0.2154615, 0.0561132),
  (0.2045835, 0.0559873),
  (0.1939290, 0.0558070),
  (0.1835034, 0.0555590),
  (0.1733122, 0.0552271),
  (0.1633605, 0.0547973),
  (0.1536536, 0.0542583),
  (0.1441967, 0.0536010),
  (0.1349949, 0.0528185),
  (0.1260533, 0.0519062),
  (0.1173767, 0.0508616),
  (0.1089702, 0.0496841),
  (0.1008386, 0.0483751),
  (0.0929867, 0.0469375),
  (0.0854193, 0.0453761),
  (0.0781412, 0.0436969),
  (0.0711569, 0.0419076),
  (0.0644712, 0.0400168),
  (0.0580885, 0.0380342),
  (0.0520135, 0.0359705),
  (0.0462506, 0.0338371),
  (0.0408043, 0.0316459),
  (0.0356789, 0.0294095),
  (0.0308789, 0.0271403),
  (0.0264085, 0.0248514),
  (0.0222721, 0.0225553),
  (0.0184738, 0.0202648),
  (0.0150180, 0.0179919),
  (0.0119087, 0.0157485),
  (0.0091501, 0.0135456),
  (0.0067463, 0.0113936),
  (0.0047014, 0.0093018),
  (0.0030194, 0.0072788),
  (0.0017043, 0.0053317),
  (0.0007601, 0.0034667),
  (0.0001907, 0.0016883),
  (0.0000000, 0.0000000),
  (0.0001907, -0.0015721),
  (0.0007601, -0.0030048),
  (0.0017043, -0.0043012),
  (0.0030194, -0.0054658),
  (0.0047014, -0.0065040),
  (0.0067463, -0.0074226),
  (0.0091501, -0.0082289),
  (0.0119087, -0.0089314),
  (0.0150180, -0.0095392),
  (0.0184738, -0.0100619),
  (0.0222721, -0.0105097),
  (0.0264085, -0.0108933),
  (0.0308789, -0.0112234),
  (0.0356789, -0.0115111),
  (0.0408043, -0.0117671),
  (0.0462506, -0.0120023),
  (0.0520135, -0.0122269),
  (0.0580885, -0.0124511),
  (0.0644712, -0.0126841),
  (0.0711569, -0.0129345),
  (0.0781412, -0.0132101),
  (0.0854193, -0.0135177),
  (0.0929867, -0.0138628),
  (0.1008386, -0.0142497),
  (0.1089702, -0.0146813),
  (0.1173767, -0.0151589),
  (0.1260533, -0.0156823),
  (0.1349949, -0.0162494),
  (0.1441967, -0.0168563),
  (0.1536536, -0.0174970),
  (0.1633605, -0.0181638),
  (0.1733122, -0.0188464),
  (0.1835034, -0.0195327),
  (0.1939290, -0.0202080),
  (0.2045835, -0.0208556),
  (0.2154615, -0.0214619),
  (0.2265575, -0.0220250),
  (0.2378660, -0.0225448),
  (0.2493812, -0.0230212),
  (0.2610975, -0.0234543),
  (0.2730090, -0.0238440),
  (0.2851099, -0.0241906),
  (0.2973941, -0.0244944),
  (0.3098556, -0.0247555),
  (0.3224882, -0.0249745),
  (0.3352856, -0.0251517),
  (0.3482415, -0.0252877),
  (0.3613493, -0.0253831),
  (0.3746025, -0.0254385),
  (0.3879944, -0.0254545),
  (0.4015181, -0.0254320),
  (0.4151667, -0.0253717),
  (0.4289331, -0.0252745),
  (0.4428100, -0.0251412),
  (0.4567901, -0.0249728),
  (0.4708659, -0.0247701),
  (0.4850295, -0.0245342),
  (0.4992733, -0.0242661),
  (0.5135891, -0.0239666),
  (0.5279688, -0.0236370),
  (0.5424038, -0.0232781),
  (0.5568856, -0.0228911),
  (0.5714054, -0.0224771),
  (0.5859539, -0.0220369),
  (0.6005219, -0.0215718),
  (0.6150998, -0.0210828),
  (0.6296777, -0.0205710),
  (0.6442453, -0.0200374),
  (0.6587922, -0.0194831),
  (0.6733075, -0.0189091),
  (0.6877799, -0.0183166),
  (0.7021977, -0.0177067),
  (0.7165489, -0.0170803),
  (0.7308209, -0.0164388),
  (0.7450005, -0.0157832),
  (0.7590742, -0.0151147),
  (0.7730275, -0.0144345),
  (0.7868454, -0.0137439),
  (0.8005122, -0.0130442),
  (0.8140113, -0.0123368),
  (0.8273250, -0.0116232),
  (0.8404347, -0.0109050),
  (0.8533205, -0.0101839),
  (0.8659609, -0.0094618),
  (0.8783331, -0.0087407),
  (0.8904123, -0.0080228),
  (0.9021712, -0.0073105),
  (0.9135802, -0.0066067),
  (0.9246063, -0.0059143),
  (0.9352124, -0.0052368),
  (0.9453566, -0.0045780),
  (0.9549902, -0.0039425),
  (0.9640559, -0.0033354),
  (0.9724844, -0.0027631),
  (0.9801884, -0.0022332),
  (0.9870521, -0.0017556),
  (0.9929085, -0.0013438),
  (0.9974774, -0.0010199),
  (1.0000000, -0.0008400)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# # Multiply all x and y values by the calculated factor
# x_values = [x * factor for x in x_values]
# y_values = [y * factor for y in y_values]

# modified_points = [(x, y) for x, y in zip(x_values, y_values)]

# # Generate more z values for smoother representation
# z_values = np.linspace(0, 6, 10000)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
# ax = fig.add_subplot(111, projection='3d')

# # Plot all (x, y) values for each z value
# for z in z_values:
#     ax.plot(x_values, y_values, z, marker='', linestyle='-')

# # Set plot title and labels
# ax.set_title('3D Plot of Points with Varying Z-values')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# ax.set_zlabel('Z-axis')

# # Set x-axis ticks and grid in increments of 0.01
# x_ticks = np.arange(0, 12.51, 0.5)
# ax.set_xticks(x_ticks)
# ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# # Set y-axis ticks and grid to match x-axis
# y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
# ax.set_yticks(y_ticks)
# ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# # Ensure equal aspect ratio
# ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# # Show the plot
# plt.show()

# def calculate_area(modified_points):
#     sum = 0
#     for i in range(len(modified_points)-1):
#          sum += sqrt((modified_points[i][0] - modified_points[i + 1][0])**2 + (modified_points[i][1] - modified_points[i+1][1])**2)
#     area = sum * 150
#     return area

# # Calculate area
# area = calculate_area(modified_points)
# print("Area of the closed figure:", area)

#Calculus of thickness
max_y = max(y_values)*factor
min_y = min(y_values)*factor
thickness = max_y-min_y
print(thickness)