import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
    (1.0000000, 0.0021000),
    (0.9974774, 0.0027447),
    (0.9929085, 0.0039077),
    (0.9870521, 0.0053898),
    (0.9801884, 0.0071144),
    (0.9724844, 0.0090346),
    (0.9640559, 0.0111168),
    (0.9549902, 0.0133351),
    (0.9453566, 0.0156685),
    (0.9352124, 0.0180995),
    (0.9246063, 0.0206132),
    (0.9135802, 0.0231964),
    (0.9021712, 0.0258379),
    (0.8904123, 0.0285274),
    (0.8783331, 0.0312558),
    (0.8659609, 0.0340149),
    (0.8533205, 0.0367972),
    (0.8404347, 0.0395958),
    (0.8273250, 0.0424046),
    (0.8140113, 0.0452176),
    (0.8005122, 0.0480295),
    (0.7868454, 0.0508351),
    (0.7730275, 0.0536297),
    (0.7590742, 0.0564087),
    (0.7450005, 0.0591678),
    (0.7308209, 0.0619028),
    (0.7165489, 0.0646098),
    (0.7021977, 0.0672848),
    (0.6877799, 0.0699241),
    (0.6733075, 0.0725240),
    (0.6587922, 0.0750808),
    (0.6442453, 0.0775910),
    (0.6296777, 0.0800510),
    (0.6150998, 0.0824574),
    (0.6005219, 0.0848067),
    (0.5859539, 0.0870954),
    (0.5714054, 0.0893202),
    (0.5568856, 0.0914777),
    (0.5424038, 0.0935646),
    (0.5279688, 0.0955774),
    (0.5135891, 0.0975130),
    (0.4992733, 0.0993681),
    (0.4850295, 0.1011395),
    (0.4708659, 0.1028240),
    (0.4567901, 0.1044186),
    (0.4428100, 0.1059203),
    (0.4289331, 0.1073261),
    (0.4151667, 0.1086332),
    (0.4015181, 0.1098388),
    (0.3879944, 0.1109404),
    (0.3746025, 0.1119353),
    (0.3613493, 0.1128213),
    (0.3482415, 0.1135960),
    (0.3352856, 0.1142574),
    (0.3224882, 0.1148035),
    (0.3098556, 0.1152325),
    (0.2973941, 0.1155428),
    (0.2851099, 0.1157330),
    (0.2730090, 0.1158017),
    (0.2610975, 0.1157481),
    (0.2493812, 0.1155711),
    (0.2378660, 0.1152701),
    (0.2265575, 0.1148446),
    (0.2154615, 0.1142944),
    (0.2045835, 0.1136195),
    (0.1939290, 0.1128182),
    (0.1835034, 0.1118777),
    (0.1733122, 0.1107822),
    (0.1633605, 0.1095181),
    (0.1536536, 0.1080749),
    (0.1441967, 0.1064439),
    (0.1349949, 0.1046194),
    (0.1260533, 0.1025976),
    (0.1173767, 0.1003771),
    (0.1089702, 0.0979582),
    (0.1008386, 0.0953437),
    (0.0929867, 0.0925377),
    (0.0854193, 0.0895464),
    (0.0781412, 0.0863772),
    (0.0711569, 0.0830392),
    (0.0644712, 0.0795424),
    (0.0580885, 0.0758981),
    (0.0520135, 0.0721185),
    (0.0462506, 0.0682166),
    (0.0408043, 0.0642057),
    (0.0356789, 0.0600999),
    (0.0308789, 0.0559132),
    (0.0264085, 0.0516599),
    (0.0222721, 0.0473541),
    (0.0184738, 0.0430098),
    (0.0150180, 0.0386402),
    (0.0119087, 0.0342584),
    (0.0091501, 0.0298765),
    (0.0067463, 0.0255057),
    (0.0047014, 0.0211562),
    (0.0030194, 0.0168372),
    (0.0017043, 0.0125564),
    (0.0007601, 0.0083202),
    (0.0001907, 0.0041337),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0040175),
    (0.0007601, -0.0078583),
    (0.0017043, -0.0115258),
    (0.0030194, -0.0150242),
    (0.0047014, -0.0183584),
    (0.0067463, -0.0215347),
    (0.0091501, -0.0245598),
    (0.0119087, -0.0274414),
    (0.0150180, -0.0301875),
    (0.0184738, -0.0328068),
    (0.0222721, -0.0353085),
    (0.0264085, -0.0377018),
    (0.0308789, -0.0399963),
    (0.0356789, -0.0422015),
    (0.0408043, -0.0443269),
    (0.0462506, -0.0463818),
    (0.0520135, -0.0483750),
    (0.0580885, -0.0503150),
    (0.0644712, -0.0522097),
    (0.0711569, -0.0540661),
    (0.0781412, -0.0558905),
    (0.0854193, -0.0576881),
    (0.0929867, -0.0594631),
    (0.1008386, -0.0612183),
    (0.1089702, -0.0629554),
    (0.1173767, -0.0646744),
    (0.1260533, -0.0663737),
    (0.1349949, -0.0680503),
    (0.1441967, -0.0696992),
    (0.1536536, -0.0713136),
    (0.1633605, -0.0728846),
    (0.1733122, -0.0744015),
    (0.1835034, -0.0758514),
    (0.1939290, -0.0772192),
    (0.2045835, -0.0784877),
    (0.2154615, -0.0796432),
    (0.2265575, -0.0806834),
    (0.2378660, -0.0816083),
    (0.2493812, -0.0824179),
    (0.2610975, -0.0831124),
    (0.2730090, -0.0836922),
    (0.2851099, -0.0841579),
    (0.2973941, -0.0845103),
    (0.3098556, -0.0847504),
    (0.3224882, -0.0848793),
    (0.3352856, -0.0848985),
    (0.3482415, -0.0848093),
    (0.3613493, -0.0846136),
    (0.3746025, -0.0843129),
    (0.3879944, -0.0839095),
    (0.4015181, -0.0834052),
    (0.4151667, -0.0828024),
    (0.4289331, -0.0821033),
    (0.4428100, -0.0813104),
    (0.4567901, -0.0804262),
    (0.4708659, -0.0794533),
    (0.4850295, -0.0783944),
    (0.4992733, -0.0772521),
    (0.5135891, -0.0760293),
    (0.5279688, -0.0747289),
    (0.5424038, -0.0733536),
    (0.5568856, -0.0719064),
    (0.5714054, -0.0703902),
    (0.5859539, -0.0688079),
    (0.6005219, -0.0671626),
    (0.6150998, -0.0654572),
    (0.6296777, -0.0636947),
    (0.6442453, -0.0618781),
    (0.6587922, -0.0600104),
    (0.6733075, -0.0580947),
    (0.6877799, -0.0561341),
    (0.7021977, -0.0541316),
    (0.7165489, -0.0520904),
    (0.7308209, -0.0500138),
    (0.7450005, -0.0479051),
    (0.7590742, -0.0457676),
    (0.7730275, -0.0436048),
    (0.7868454, -0.0414206),
    (0.8005122, -0.0392186),
    (0.8140113, -0.0370029),
    (0.8273250, -0.0347780),
    (0.8404347, -0.0325482),
    (0.8533205, -0.0303187),
    (0.8659609, -0.0280947),
    (0.8783331, -0.0258820),
    (0.8904123, -0.0236871),
    (0.9021712, -0.0215170),
    (0.9135802, -0.0193795),
    (0.9246063, -0.0172832),
    (0.9352124, -0.0152380),
    (0.9453566, -0.0132550),
    (0.9549902, -0.0113471),
    (0.9640559, -0.0095292),
    (0.9724844, -0.0078193),
    (0.9801884, -0.0062394),
    (0.9870521, -0.0048179),
    (0.9929085, -0.0035945),
    (0.9974774, -0.0026333),
    (1.0000000, -0.0021000)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# # Multiply all x and y values by the calculated factor
# x_values = [x * factor for x in x_values]
# y_values = [y * factor for y in y_values]

# modified_points = [(x, y) for x, y in zip(x_values, y_values)]

# # Generate more z values for smoother representation
# z_values = np.linspace(0, 6, 10000)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
# ax = fig.add_subplot(111, projection='3d')

# # Plot all (x, y) values for each z value
# for z in z_values:
#     ax.plot(x_values, y_values, z, marker='', linestyle='-')

# # Set plot title and labels
# ax.set_title('3D Plot of Points with Varying Z-values')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# ax.set_zlabel('Z-axis')

# # Set x-axis ticks and grid in increments of 0.01
# x_ticks = np.arange(0, 12.51, 0.5)
# ax.set_xticks(x_ticks)
# ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# # Set y-axis ticks and grid to match x-axis
# y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
# ax.set_yticks(y_ticks)
# ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# # Ensure equal aspect ratio
# ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# # Show the plot
# plt.show()


# def calculate_area(modified_points):
#     sum = 0
#     for i in range(len(modified_points)-1):
#          sum += sqrt((modified_points[i][0] - modified_points[i + 1][0])**2 + (modified_points[i][1] - modified_points[i + 1][1])**2)
#     area = sum * 150
#     return area

# # Calculate area
# area = calculate_area(modified_points)
# print("Area of the closed figure:", area)

#Calculus of thickness
max_y = max(y_values)*factor
min_y = min(y_values)*factor
thickness = max_y-min_y
print(thickness)