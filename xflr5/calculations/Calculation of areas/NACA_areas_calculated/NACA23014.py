import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
    (1.0000000, 0.0014700),
    (0.9974774, 0.0019380),
    (0.9929085, 0.0027824),
    (0.9870521, 0.0038586),
    (0.9801884, 0.0051113),
    (0.9724844, 0.0065065),
    (0.9640559, 0.0080199),
    (0.9549902, 0.0096328),
    (0.9453566, 0.0113300),
    (0.9352124, 0.0130989),
    (0.9246063, 0.0149287),
    (0.9135802, 0.0168101),
    (0.9021712, 0.0187347),
    (0.8904123, 0.0206952),
    (0.8783331, 0.0226851),
    (0.8659609, 0.0246984),
    (0.8533205, 0.0267298),
    (0.8404347, 0.0287742),
    (0.8273250, 0.0308272),
    (0.8140113, 0.0328846),
    (0.8005122, 0.0349423),
    (0.7868454, 0.0369968),
    (0.7730275, 0.0390445),
    (0.7590742, 0.0410823),
    (0.7450005, 0.0431069),
    (0.7308209, 0.0451153),
    (0.7165489, 0.0471048),
    (0.7021977, 0.0490724),
    (0.6877799, 0.0510154),
    (0.6733075, 0.0529312),
    (0.6587922, 0.0548171),
    (0.6442453, 0.0566706),
    (0.6296777, 0.0584891),
    (0.6150998, 0.0602702),
    (0.6005219, 0.0620113),
    (0.5859539, 0.0637099),
    (0.5714054, 0.0653637),
    (0.5568856, 0.0669701),
    (0.5424038, 0.0685268),
    (0.5279688, 0.0700315),
    (0.5135891, 0.0714816),
    (0.4992733, 0.0728750),
    (0.4850295, 0.0742094),
    (0.4708659, 0.0754824),
    (0.4567901, 0.0766919),
    (0.4428100, 0.0778357),
    (0.4289331, 0.0789117),
    (0.4151667, 0.0799178),
    (0.4015181, 0.0808522),
    (0.3879944, 0.0817129),
    (0.3746025, 0.0824981),
    (0.3613493, 0.0832061),
    (0.3482415, 0.0838352),
    (0.3352856, 0.0843840),
    (0.3224882, 0.0848511),
    (0.3098556, 0.0852351),
    (0.2973941, 0.0855348),
    (0.2851099, 0.0857493),
    (0.2730090, 0.0858776),
    (0.2610975, 0.0859190),
    (0.2493812, 0.0858727),
    (0.2378660, 0.0857383),
    (0.2265575, 0.0855154),
    (0.2154615, 0.0852038),
    (0.2045835, 0.0848034),
    (0.1939290, 0.0843126),
    (0.1835034, 0.0837184),
    (0.1733122, 0.0830046),
    (0.1633605, 0.0821577),
    (0.1536536, 0.0811666),
    (0.1441967, 0.0800225),
    (0.1349949, 0.0787190),
    (0.1260533, 0.0772519),
    (0.1173767, 0.0756193),
    (0.1089702, 0.0738212),
    (0.1008386, 0.0718594),
    (0.0929867, 0.0697376),
    (0.0854193, 0.0674612),
    (0.0781412, 0.0650371),
    (0.0711569, 0.0624734),
    (0.0644712, 0.0597796),
    (0.0580885, 0.0569661),
    (0.0520135, 0.0540445),
    (0.0462506, 0.0510268),
    (0.0408043, 0.0479258),
    (0.0356789, 0.0447547),
    (0.0308789, 0.0415268),
    (0.0264085, 0.0382556),
    (0.0222721, 0.0349547),
    (0.0184738, 0.0316373),
    (0.0150180, 0.0283161),
    (0.0119087, 0.0250035),
    (0.0091501, 0.0217110),
    (0.0067463, 0.0184496),
    (0.0047014, 0.0152290),
    (0.0030194, 0.0120580),
    (0.0017043, 0.0089440),
    (0.0007601, 0.0058935),
    (0.0001907, 0.0029110),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0027948),
    (0.0007601, -0.0054316),
    (0.0017043, -0.0079135),
    (0.0030194, -0.0102450),
    (0.0047014, -0.0124312),
    (0.0067463, -0.0144787),
    (0.0091501, -0.0163944),
    (0.0119087, -0.0181864),
    (0.0150180, -0.0198633),
    (0.0184738, -0.0214343),
    (0.0222721, -0.0229091),
    (0.0264085, -0.0242975),
    (0.0308789, -0.0256099),
    (0.0356789, -0.0268563),
    (0.0408043, -0.0280470),
    (0.0462506, -0.0291920),
    (0.0520135, -0.0303010),
    (0.0580885, -0.0313830),
    (0.0644712, -0.0324469),
    (0.0711569, -0.0335003),
    (0.0781412, -0.0345503),
    (0.0854193, -0.0356029),
    (0.0929867, -0.0366629),
    (0.1008386, -0.0377340),
    (0.1089702, -0.0388183),
    (0.1173767, -0.0399166),
    (0.1260533, -0.0410280),
    (0.1349949, -0.0421499),
    (0.1441967, -0.0432777),
    (0.1536536, -0.0444053),
    (0.1633605, -0.0455242),
    (0.1733122, -0.0466239),
    (0.1835034, -0.0476920),
    (0.1939290, -0.0487136),
    (0.2045835, -0.0496717),
    (0.2154615, -0.0505525),
    (0.2265575, -0.0513542),
    (0.2378660, -0.0520766),
    (0.2493812, -0.0527196),
    (0.2610975, -0.0532833),
    (0.2730090, -0.0537681),
    (0.2851099, -0.0541743),
    (0.2973941, -0.0545023),
    (0.3098556, -0.0547530),
    (0.3224882, -0.0549269),
    (0.3352856, -0.0550251),
    (0.3482415, -0.0550485),
    (0.3613493, -0.0549983),
    (0.3746025, -0.0548757),
    (0.3879944, -0.0546820),
    (0.4015181, -0.0544186),
    (0.4151667, -0.0540871),
    (0.4289331, -0.0536889),
    (0.4428100, -0.0532258),
    (0.4567901, -0.0526995),
    (0.4708659, -0.0521117),
    (0.4850295, -0.0514643),
    (0.4992733, -0.0507591),
    (0.5135891, -0.0499980),
    (0.5279688, -0.0491829),
    (0.5424038, -0.0483159),
    (0.5568856, -0.0473988),
    (0.5714054, -0.0464336),
    (0.5859539, -0.0454224),
    (0.6005219, -0.0443672),
    (0.6150998, -0.0432700),
    (0.6296777, -0.0421329),
    (0.6442453, -0.0409577),
    (0.6587922, -0.0397467),
    (0.6733075, -0.0385019),
    (0.6877799, -0.0372253),
    (0.7021977, -0.0359191),
    (0.7165489, -0.0345854),
    (0.7308209, -0.0332263),
    (0.7450005, -0.0318441),
    (0.7590742, -0.0304411),
    (0.7730275, -0.0290197),
    (0.7868454, -0.0275822),
    (0.8005122, -0.0261314),
    (0.8140113, -0.0246699),
    (0.8273250, -0.0232006),
    (0.8404347, -0.0217266),
    (0.8533205, -0.0202513),
    (0.8659609, -0.0187782),
    (0.8783331, -0.0173114),
    (0.8904123, -0.0158550),
    (0.9021712, -0.0144138),
    (0.9135802, -0.0129931),
    (0.9246063, -0.0115988),
    (0.9352124, -0.0102374),
    (0.9453566, -0.0089165),
    (0.9549902, -0.0076448),
    (0.9640559, -0.0064323),
    (0.9724844, -0.0052912),
    (0.9801884, -0.0042363),
    (0.9870521, -0.0032867),
    (0.9929085, -0.0024692),
    (0.9974774, -0.0018266),
    (1.0000000, -0.0014700)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# # Multiply all x and y values by the calculated factor
# x_values = [x * factor for x in x_values]
# y_values = [y * factor for y in y_values]

# modified_points = [(x, y) for x, y in zip(x_values, y_values)]

# # Generate more z values for smoother representation
# z_values = np.linspace(0, 6, 10000)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
# ax = fig.add_subplot(111, projection='3d')

# # Plot all (x, y) values for each z value
# for z in z_values:
#     ax.plot(x_values, y_values, z, marker='', linestyle='-')

# # Set plot title and labels
# ax.set_title('3D Plot of Points with Varying Z-values')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# ax.set_zlabel('Z-axis')

# # Set x-axis ticks and grid in increments of 0.01
# x_ticks = np.arange(0, 12.51, 0.5)
# ax.set_xticks(x_ticks)
# ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# # Set y-axis ticks and grid to match x-axis
# y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
# ax.set_yticks(y_ticks)
# ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# # Ensure equal aspect ratio
# ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# # Show the plot
# plt.show()

# def calculate_area(modified_points):
#     sum = 0
#     for i in range(len(modified_points)-1):
#          sum += sqrt((modified_points[i][0] - modified_points[i + 1][0])**2 + (modified_points[i][1] - modified_points[i + 1][1])**2)
#     area = sum * 150
#     return area

# # Calculate area
# area = calculate_area(modified_points)
# print("Area of the closed figure:", area)

#Calculus of thickness
max_y = max(y_values)*factor
min_y = min(y_values)*factor
thickness = max_y-min_y
print(thickness)