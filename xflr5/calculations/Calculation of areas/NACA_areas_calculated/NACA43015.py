import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
    (1.0000000, 0.0012600),
    (0.9974774, 0.0016946),
    (0.9929085, 0.0024789),
    (0.9870521, 0.0034789),
    (0.9801884, 0.0046437),
    (0.9724844, 0.0059416),
    (0.9640559, 0.0073505),
    (0.9549902, 0.0088531),
    (0.9453566, 0.0104355),
    (0.9352124, 0.0120861),
    (0.9246063, 0.0137951),
    (0.9135802, 0.0155537),
    (0.9021712, 0.0173546),
    (0.8904123, 0.0191909),
    (0.8783331, 0.0210565),
    (0.8659609, 0.0229462),
    (0.8533205, 0.0248548),
    (0.8404347, 0.0267780),
    (0.8273250, 0.0287114),
    (0.8140113, 0.0306512),
    (0.8005122, 0.0325939),
    (0.7868454, 0.0345360),
    (0.7730275, 0.0364743),
    (0.7590742, 0.0384058),
    (0.7450005, 0.0403277),
    (0.7308209, 0.0422371),
    (0.7165489, 0.0441314),
    (0.7021977, 0.0460081),
    (0.6877799, 0.0478646),
    (0.6733075, 0.0496985),
    (0.6587922, 0.0515073),
    (0.6442453, 0.0532888),
    (0.6296777, 0.0550406),
    (0.6150998, 0.0567603),
    (0.6005219, 0.0584459),
    (0.5859539, 0.0600949),
    (0.5714054, 0.0617052),
    (0.5568856, 0.0632745),
    (0.5424038, 0.0648007),
    (0.5279688, 0.0662817),
    (0.5135891, 0.0677152),
    (0.4992733, 0.0690993),
    (0.4850295, 0.0704317),
    (0.4708659, 0.0717106),
    (0.4567901, 0.0729338),
    (0.4428100, 0.0740994),
    (0.4289331, 0.0752056),
    (0.4151667, 0.0762504),
    (0.4015181, 0.0772322),
    (0.3879944, 0.0781491),
    (0.3746025, 0.0789972),
    (0.3613493, 0.0797680),
    (0.3482415, 0.0804529),
    (0.3352856, 0.0810440),
    (0.3224882, 0.0815338),
    (0.3098556, 0.0819159),
    (0.2973941, 0.0821840),
    (0.2851099, 0.0823330),
    (0.2730090, 0.0823582),
    (0.2610975, 0.0822557),
    (0.2493812, 0.0820223),
    (0.2378660, 0.0816556),
    (0.2265575, 0.0811537),
    (0.2154615, 0.0805156),
    (0.2045835, 0.0797410),
    (0.1939290, 0.0788301),
    (0.1835034, 0.0777840),
    (0.1733122, 0.0766043),
    (0.1633605, 0.0752933),
    (0.1536536, 0.0738539),
    (0.1441967, 0.0722895),
    (0.1349949, 0.0706042),
    (0.1260533, 0.0688026),
    (0.1173767, 0.0668896),
    (0.1089702, 0.0648708),
    (0.1008386, 0.0627520),
    (0.0929867, 0.0605395),
    (0.0854193, 0.0582399),
    (0.0781412, 0.0558601),
    (0.0711569, 0.0534073),
    (0.0644712, 0.0508886),
    (0.0580885, 0.0483117),
    (0.0520135, 0.0456839),
    (0.0462506, 0.0430131),
    (0.0408043, 0.0403066),
    (0.0356789, 0.0375721),
    (0.0308789, 0.0348170),
    (0.0264085, 0.0320486),
    (0.0222721, 0.0292738),
    (0.0184738, 0.0264996),
    (0.0150180, 0.0237324),
    (0.0119087, 0.0209784),
    (0.0091501, 0.0182432),
    (0.0067463, 0.0155321),
    (0.0047014, 0.0128500),
    (0.0030194, 0.0102010),
    (0.0017043, 0.0075888),
    (0.0007601, 0.0050164),
    (0.0001907, 0.0024863),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0024044),
    (0.0007601, -0.0046907),
    (0.0017043, -0.0068606),
    (0.0030194, -0.0089158),
    (0.0047014, -0.0108588),
    (0.0067463, -0.0126921),
    (0.0091501, -0.0144186),
    (0.0119087, -0.0160415),
    (0.0150180, -0.0175642),
    (0.0184738, -0.0189903),
    (0.0222721, -0.0203237),
    (0.0264085, -0.0215685),
    (0.0308789, -0.0227287),
    (0.0356789, -0.0238087),
    (0.0408043, -0.0248130),
    (0.0462506, -0.0257459),
    (0.0520135, -0.0266122),
    (0.0580885, -0.0274162),
    (0.0644712, -0.0281626),
    (0.0711569, -0.0288559),
    (0.0781412, -0.0295005),
    (0.0854193, -0.0301008),
    (0.0929867, -0.0306610),
    (0.1008386, -0.0311852),
    (0.1089702, -0.0316774),
    (0.1173767, -0.0321412),
    (0.1260533, -0.0325802),
    (0.1349949, -0.0329976),
    (0.1441967, -0.0333964),
    (0.1536536, -0.0337792),
    (0.1633605, -0.0341483),
    (0.1733122, -0.0345059),
    (0.1835034, -0.0348535),
    (0.1939290, -0.0351923),
    (0.2045835, -0.0355233),
    (0.2154615, -0.0358469),
    (0.2265575, -0.0361631),
    (0.2378660, -0.0364715),
    (0.2493812, -0.0367711),
    (0.2610975, -0.0370606),
    (0.2730090, -0.0373381),
    (0.2851099, -0.0376015),
    (0.2973941, -0.0378478),
    (0.3098556, -0.0380739),
    (0.3224882, -0.0382759),
    (0.3352856, -0.0384496),
    (0.3482415, -0.0385903),
    (0.3613493, -0.0386929),
    (0.3746025, -0.0387518),
    (0.3879944, -0.0387608),
    (0.4015181, -0.0387143),
    (0.4151667, -0.0386109),
    (0.4289331, -0.0384521),
    (0.4428100, -0.0382390),
    (0.4567901, -0.0379731),
    (0.4708659, -0.0376558),
    (0.4850295, -0.0372886),
    (0.4992733, -0.0368728),
    (0.5135891, -0.0364102),
    (0.5279688, -0.0359021),
    (0.5424038, -0.0353501),
    (0.5568856, -0.0347560),
    (0.5714054, -0.0341211),
    (0.5859539, -0.0334471),
    (0.6005219, -0.0327357),
    (0.6150998, -0.0319884),
    (0.6296777, -0.0312069),
    (0.6442453, -0.0303927),
    (0.6587922, -0.0295474),
    (0.6733075, -0.0286728),
    (0.6877799, -0.0277703),
    (0.7021977, -0.0268417),
    (0.7165489, -0.0258887),
    (0.7308209, -0.0249129),
    (0.7450005, -0.0239161),
    (0.7590742, -0.0229000),
    (0.7730275, -0.0218665),
    (0.7868454, -0.0208175),
    (0.8005122, -0.0197550),
    (0.8140113, -0.0186811),
    (0.8273250, -0.0175981),
    (0.8404347, -0.0165085),
    (0.8533205, -0.0154146),
    (0.8659609, -0.0143195),
    (0.8783331, -0.0132261),
    (0.8904123, -0.0121379),
    (0.9021712, -0.0110584),
    (0.9135802, -0.0099918),
    (0.9246063, -0.0089428),
    (0.9352124, -0.0079164),
    (0.9453566, -0.0069187),
    (0.9549902, -0.0059563),
    (0.9640559, -0.0050371),
    (0.9724844, -0.0041707),
    (0.9801884, -0.0033686),
    (0.9870521, -0.0026456),
    (0.9929085, -0.0020225),
    (0.9974774, -0.0015322),
    (1.0000000, -0.0012600)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# # Multiply all x and y values by the calculated factor
# x_values = [x * factor for x in x_values]
# y_values = [y * factor for y in y_values]

# modified_points = [(x, y) for x, y in zip(x_values, y_values)]

# # Generate more z values for smoother representation
# z_values = np.linspace(0, 6, 10000)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
# ax = fig.add_subplot(111, projection='3d')

# # Plot all (x, y) values for each z value
# for z in z_values:
#     ax.plot(x_values, y_values, z, marker='', linestyle='-')

# # Set plot title and labels
# ax.set_title('3D Plot of Points with Varying Z-values')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# ax.set_zlabel('Z-axis')

# # Set x-axis ticks and grid in increments of 0.01
# x_ticks = np.arange(0, 12.51, 0.5)
# ax.set_xticks(x_ticks)
# ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# # Set y-axis ticks and grid to match x-axis
# y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
# ax.set_yticks(y_ticks)
# ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# # Ensure equal aspect ratio
# ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# # Show the plot
# plt.show()


# def calculate_area(modified_points):
#     sum = 0
#     for i in range(len(modified_points)-1):
#          sum += sqrt((modified_points[i][0] - modified_points[i + 1][0])**2 + (modified_points[i][1] - modified_points[i + 1][1])**2)
#     area = sum * 150
#     return area

# # Calculate area
# area = calculate_area(modified_points)
# print("Area of the closed figure:", area)

#Calculus of thickness
max_y = max(y_values)*factor
min_y = min(y_values)*factor
thickness = max_y-min_y
print(thickness)