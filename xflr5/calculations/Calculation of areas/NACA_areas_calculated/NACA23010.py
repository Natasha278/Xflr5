
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
  (1.0000000, 0.0010500),
    (0.9974774, 0.0014002),
    (0.9929085, 0.0020322),
    (0.9870521, 0.0028378),
    (0.9801884, 0.0037760),
    (0.9724844, 0.0048211),
    (0.9640559, 0.0059553),
    (0.9549902, 0.0071645),
    (0.9453566, 0.0084376),
    (0.9352124, 0.0097651),
    (0.9246063, 0.0111391),
    (0.9135802, 0.0125525),
    (0.9021712, 0.0139992),
    (0.8904123, 0.0154738),
    (0.8783331, 0.0169713),
    (0.8659609, 0.0184875),
    (0.8533205, 0.0200182),
    (0.8404347, 0.0215598),
    (0.8273250, 0.0231090),
    (0.8140113, 0.0246625),
    (0.8005122, 0.0262175),
    (0.7868454, 0.0277712),
    (0.7730275, 0.0293211),
    (0.7590742, 0.0308646),
    (0.7450005, 0.0323996),
    (0.7308209, 0.0339237),
    (0.7165489, 0.0354348),
    (0.7021977, 0.0369307),
    (0.6877799, 0.0384096),
    (0.6733075, 0.0398693),
    (0.6587922, 0.0413080),
    (0.6442453, 0.0427237),
    (0.6296777, 0.0441146),
    (0.6150998, 0.0454787),
    (0.6005219, 0.0468143),
    (0.5859539, 0.0481196),
    (0.5714054, 0.0493926),
    (0.5568856, 0.0506317),
    (0.5424038, 0.0518350),
    (0.5279688, 0.0530008),
    (0.5135891, 0.0541274),
    (0.4992733, 0.0552130),
    (0.4850295, 0.0562560),
    (0.4708659, 0.0572547),
    (0.4567901, 0.0582074),
    (0.4428100, 0.0591126),
    (0.4289331, 0.0599687),
    (0.4151667, 0.0607743),
    (0.4015181, 0.0615278),
    (0.3879944, 0.0622279),
    (0.3746025, 0.0628733),
    (0.3613493, 0.0634626),
    (0.3482415, 0.0639947),
    (0.3352856, 0.0644684),
    (0.3224882, 0.0648828),
    (0.3098556, 0.0652368),
    (0.2973941, 0.0655295),
    (0.2851099, 0.0657603),
    (0.2730090, 0.0659283),
    (0.2610975, 0.0660329),
    (0.2493812, 0.0660738),
    (0.2378660, 0.0660505),
    (0.2265575, 0.0659626),
    (0.2154615, 0.0658100),
    (0.2045835, 0.0655927),
    (0.1939290, 0.0653088),
    (0.1835034, 0.0649454),
    (0.1733122, 0.0644862),
    (0.1633605, 0.0639175),
    (0.1536536, 0.0632277),
    (0.1441967, 0.0624082),
    (0.1349949, 0.0614520),
    (0.1260533, 0.0603548),
    (0.1173767, 0.0591142),
    (0.1089702, 0.0577298),
    (0.1008386, 0.0562032),
    (0.0929867, 0.0545375),
    (0.0854193, 0.0527378),
    (0.0781412, 0.0508103),
    (0.0711569, 0.0487629),
    (0.0644712, 0.0466044),
    (0.0580885, 0.0443448),
    (0.0520135, 0.0419952),
    (0.0462506, 0.0395670),
    (0.0408043, 0.0370726),
    (0.0356789, 0.0345245),
    (0.0308789, 0.0319358),
    (0.0264085, 0.0293195),
    (0.0222721, 0.0266885),
    (0.0184738, 0.0240556),
    (0.0150180, 0.0214333),
    (0.0119087, 0.0188335),
    (0.0091501, 0.0162674),
    (0.0067463, 0.0137456),
    (0.0047014, 0.0112775),
    (0.0030194, 0.0088718),
    (0.0017043, 0.0065358),
    (0.0007601, 0.0042756),
    (0.0001907, 0.0020959),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0019797),
    (0.0007601, -0.0038137),
    (0.0017043, -0.0055053),
    (0.0030194, -0.0070588),
    (0.0047014, -0.0084798),
    (0.0067463, -0.0097746),
    (0.0091501, -0.0109508),
    (0.0119087, -0.0120164),
    (0.0150180, -0.0129806),
    (0.0184738, -0.0138527),
    (0.0222721, -0.0146428),
    (0.0264085, -0.0153614),
    (0.0308789, -0.0160189),
    (0.0356789, -0.0166262),
    (0.0408043, -0.0171937),
    (0.0462506, -0.0177322),
    (0.0520135, -0.0182516),
    (0.0580885, -0.0187617),
    (0.0644712, -0.0192717),
    (0.0711569, -0.0197898),
    (0.0781412, -0.0203235),
    (0.0854193, -0.0208795),
    (0.0929867, -0.0214629),
    (0.1008386, -0.0220778),
    (0.1089702, -0.0227270),
    (0.1173767, -0.0234115),
    (0.1260533, -0.0241309),
    (0.1349949, -0.0248829),
    (0.1441967, -0.0256634),
    (0.1536536, -0.0264665),
    (0.1633605, -0.0272839),
    (0.1733122, -0.0281056),
    (0.1835034, -0.0289191),
    (0.1939290, -0.0297099),
    (0.2045835, -0.0304609),
    (0.2154615, -0.0311588),
    (0.2265575, -0.0318014),
    (0.2378660, -0.0323887),
    (0.2493812, -0.0329207),
    (0.2610975, -0.0333973),
    (0.2730090, -0.0338187),
    (0.2851099, -0.0341852),
    (0.2973941, -0.0344970),
    (0.3098556, -0.0347547),
    (0.3224882, -0.0349586),
    (0.3352856, -0.0351095),
    (0.3482415, -0.0352080),
    (0.3613493, -0.0352548),
    (0.3746025, -0.0352509),
    (0.3879944, -0.0351970),
    (0.4015181, -0.0350942),
    (0.4151667, -0.0349435),
    (0.4289331, -0.0347460),
    (0.4428100, -0.0345028),
    (0.4567901, -0.0342150),
    (0.4708659, -0.0338840),
    (0.4850295, -0.0335109),
    (0.4992733, -0.0330971),
    (0.5135891, -0.0326437),
    (0.5279688, -0.0321523),
    (0.5424038, -0.0316240),
    (0.5568856, -0.0310603),
    (0.5714054, -0.0304626),
    (0.5859539, -0.0298321),
    (0.6005219, -0.0291703),
    (0.6150998, -0.0284786),
    (0.6296777, -0.0277583),
    (0.6442453, -0.0270108),
    (0.6587922, -0.0262376),
    (0.6733075, -0.0254400),
    (0.6877799, -0.0246195),
    (0.7021977, -0.0237775),
    (0.7165489, -0.0229154),
    (0.7308209, -0.0220346),
    (0.7450005, -0.0211368),
    (0.7590742, -0.0202235),
    (0.7730275, -0.0192962),
    (0.7868454, -0.0183566),
    (0.8005122, -0.0174066),
    (0.8140113, -0.0164478),
    (0.8273250, -0.0154823),
    (0.8404347, -0.0145122),
    (0.8533205, -0.0135397),
    (0.8659609, -0.0125673),
    (0.8783331, -0.0115976),
    (0.8904123, -0.0106335),
    (0.9021712, -0.0096783),
    (0.9135802, -0.0087355),
    (0.9246063, -0.0078091),
    (0.9352124, -0.0069036),
    (0.9453566, -0.0060242),
    (0.9549902, -0.0051766),
    (0.9640559, -0.0043677),
    (0.9724844, -0.0036058),
    (0.9801884, -0.0029009),
    (0.9870521, -0.0022660),
    (0.9929085, -0.0017189),
    (0.9974774, -0.0012888),
    (1.0000000, -0.0010500)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# # Multiply all x and y values by the calculated factor
# x_values = [x * factor for x in x_values]
# y_values = [y * factor for y in y_values]

# modified_points = [(x, y) for x, y in zip(x_values, y_values)]

# # Generate more z values for smoother representation
# z_values = np.linspace(0, 6, 10000)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
# ax = fig.add_subplot(111, projection='3d')

# # Plot all (x, y) values for each z value
# for z in z_values:
#     ax.plot(x_values, y_values, z, marker='', linestyle='-')

# # Set plot title and labels
# ax.set_title('3D Plot of Points with Varying Z-values')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# ax.set_zlabel('Z-axis')

# # Set x-axis ticks and grid in increments of 0.01
# x_ticks = np.arange(0, 12.51, 0.5)
# ax.set_xticks(x_ticks)
# ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# # Set y-axis ticks and grid to match x-axis
# y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
# ax.set_yticks(y_ticks)
# ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# # Ensure equal aspect ratio
# ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# # Show the plot
# plt.show()

# def calculate_area(modified_points):
#     sum = 0
#     for i in range(len(modified_points)-1):
#          sum += sqrt((modified_points[i][0] - modified_points[i + 1][0])**2 + (modified_points[i][1] - modified_points[i + 1][1])**2)
#     area = sum * 150
#     return area

# # Calculate area
# area = calculate_area(modified_points)
# print("Area of the closed figure:", area)

#Calculus of thickness
max_y = max(y_values)*factor
min_y = min(y_values)*factor
thickness = max_y-min_y
print(thickness)
