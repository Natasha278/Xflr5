import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
    (1.0000000, 0.0016800),
    (0.9974774, 0.0022069),
    (0.9929085, 0.0031575),
    (0.9870521, 0.0043690),
    (0.9801884, 0.0057790),
    (0.9724844, 0.0073492),
    (0.9640559, 0.0090522),
    (0.9549902, 0.0108669),
    (0.9453566, 0.0127762),
    (0.9352124, 0.0147658),
    (0.9246063, 0.0168235),
    (0.9135802, 0.0189389),
    (0.9021712, 0.0211024),
    (0.8904123, 0.0233059),
    (0.8783331, 0.0255420),
    (0.8659609, 0.0278039),
    (0.8533205, 0.0300856),
    (0.8404347, 0.0323814),
    (0.8273250, 0.0346864),
    (0.8140113, 0.0369956),
    (0.8005122, 0.0393047),
    (0.7868454, 0.0416096),
    (0.7730275, 0.0439063),
    (0.7590742, 0.0461911),
    (0.7450005, 0.0484605),
    (0.7308209, 0.0507112),
    (0.7165489, 0.0529398),
    (0.7021977, 0.0551432),
    (0.6877799, 0.0573183),
    (0.6733075, 0.0594621),
    (0.6587922, 0.0615717),
    (0.6442453, 0.0636441),
    (0.6296777, 0.0656764),
    (0.6150998, 0.0676659),
    (0.6005219, 0.0696097),
    (0.5859539, 0.0715051),
    (0.5714054, 0.0733492),
    (0.5568856, 0.0751393),
    (0.5424038, 0.0768727),
    (0.5279688, 0.0785468),
    (0.5135891, 0.0801588),
    (0.4992733, 0.0817061),
    (0.4850295, 0.0831861),
    (0.4708659, 0.0845963),
    (0.4567901, 0.0859341),
    (0.4428100, 0.0871972),
    (0.4289331, 0.0883831),
    (0.4151667, 0.0894896),
    (0.4015181, 0.0905144),
    (0.3879944, 0.0914554),
    (0.3746025, 0.0923105),
    (0.3613493, 0.0930778),
    (0.3482415, 0.0937555),
    (0.3352856, 0.0943418),
    (0.3224882, 0.0948352),
    (0.3098556, 0.0952342),
    (0.2973941, 0.0955375),
    (0.2851099, 0.0957439),
    (0.2730090, 0.0958523),
    (0.2610975, 0.0958620),
    (0.2493812, 0.0957722),
    (0.2378660, 0.0955822),
    (0.2265575, 0.0952918),
    (0.2154615, 0.0949007),
    (0.2045835, 0.0944088),
    (0.1939290, 0.0938145),
    (0.1835034, 0.0931048),
    (0.1733122, 0.0922638),
    (0.1633605, 0.0912779),
    (0.1536536, 0.0901360),
    (0.1441967, 0.0888296),
    (0.1349949, 0.0873525),
    (0.1260533, 0.0857005),
    (0.1173767, 0.0838719),
    (0.1089702, 0.0818669),
    (0.1008386, 0.0796875),
    (0.0929867, 0.0773377),
    (0.0854193, 0.0748230),
    (0.0781412, 0.0721505),
    (0.0711569, 0.0693286),
    (0.0644712, 0.0663672),
    (0.0580885, 0.0632768),
    (0.0520135, 0.0600692),
    (0.0462506, 0.0567567),
    (0.0408043, 0.0533525),
    (0.0356789, 0.0498697),
    (0.0308789, 0.0463222),
    (0.0264085, 0.0427237),
    (0.0222721, 0.0390879),
    (0.0184738, 0.0354281),
    (0.0150180, 0.0317575),
    (0.0119087, 0.0280884),
    (0.0091501, 0.0244329),
    (0.0067463, 0.0208016),
    (0.0047014, 0.0172047),
    (0.0030194, 0.0136510),
    (0.0017043, 0.0101482),
    (0.0007601, 0.0067024),
    (0.0001907, 0.0033186),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0032023),
    (0.0007601, -0.0062405),
    (0.0017043, -0.0091176),
    (0.0030194, -0.0118380),
    (0.0047014, -0.0144070),
    (0.0067463, -0.0168307),
    (0.0091501, -0.0191162),
    (0.0119087, -0.0212714),
    (0.0150180, -0.0233047),
    (0.0184738, -0.0252252),
    (0.0222721, -0.0270422),
    (0.0264085, -0.0287656),
    (0.0308789, -0.0304053),
    (0.0356789, -0.0319714),
    (0.0408043, -0.0334736),
    (0.0462506, -0.0349219),
    (0.0520135, -0.0363256),
    (0.0580885, -0.0376937),
    (0.0644712, -0.0390345),
    (0.0711569, -0.0403555),
    (0.0781412, -0.0416637),
    (0.0854193, -0.0429646),
    (0.0929867, -0.0442630),
    (0.1008386, -0.0455621),
    (0.1089702, -0.0468640),
    (0.1173767, -0.0481692),
    (0.1260533, -0.0494766),
    (0.1349949, -0.0507834),
    (0.1441967, -0.0520849),
    (0.1536536, -0.0533747),
    (0.1633605, -0.0546443),
    (0.1733122, -0.0558831),
    (0.1835034, -0.0570785),
    (0.1939290, -0.0582155),
    (0.2045835, -0.0592770),
    (0.2154615, -0.0602494),
    (0.2265575, -0.0611306),
    (0.2378660, -0.0619205),
    (0.2493812, -0.0626190),
    (0.2610975, -0.0632264),
    (0.2730090, -0.0637428),
    (0.2851099, -0.0641688),
    (0.2973941, -0.0645050),
    (0.3098556, -0.0647521),
    (0.3224882, -0.0649111),
    (0.3352856, -0.0649829),
    (0.3482415, -0.0649688),
    (0.3613493, -0.0648701),
    (0.3746025, -0.0646881),
    (0.3879944, -0.0644245),
    (0.4015181, -0.0640808),
    (0.4151667, -0.0636588),
    (0.4289331, -0.0631604),
    (0.4428100, -0.0625874),
    (0.4567901, -0.0619418),
    (0.4708659, -0.0612256),
    (0.4850295, -0.0604410),
    (0.4992733, -0.0595901),
    (0.5135891, -0.0586751),
    (0.5279688, -0.0576982),
    (0.5424038, -0.0566618),
    (0.5568856, -0.0555680),
    (0.5714054, -0.0544191),
    (0.5859539, -0.0532176),
    (0.6005219, -0.0519657),
    (0.6150998, -0.0506658),
    (0.6296777, -0.0493201),
    (0.6442453, -0.0479312),
    (0.6587922, -0.0465013),
    (0.6733075, -0.0450328),
    (0.6877799, -0.0435282),
    (0.7021977, -0.0419899),
    (0.7165489, -0.0404204),
    (0.7308209, -0.0388221),
    (0.7450005, -0.0371978),
    (0.7590742, -0.0355499),
    (0.7730275, -0.0338814),
    (0.7868454, -0.0321950),
    (0.8005122, -0.0304938),
    (0.8140113, -0.0287809),
    (0.8273250, -0.0270597),
    (0.8404347, -0.0253338),
    (0.8533205, -0.0236071),
    (0.8659609, -0.0218837),
    (0.8783331, -0.0201682),
    (0.8904123, -0.0184657),
    (0.9021712, -0.0167815),
    (0.9135802, -0.0151219),
    (0.9246063, -0.0134936),
    (0.9352124, -0.0119043),
    (0.9453566, -0.0103627),
    (0.9549902, -0.0088789),
    (0.9640559, -0.0074646),
    (0.9724844, -0.0061339),
    (0.9801884, -0.0049040),
    (0.9870521, -0.0037971),
    (0.9929085, -0.0028443),
    (0.9974774, -0.0020955),
    (1.0000000, -0.0016800)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# Multiply all x and y values by the calculated factor
x_values = [x * factor for x in x_values]
y_values = [y * factor for y in y_values]

# Generate more z values for smoother representation
z_values = np.linspace(0, 6, 10000)

# Create a 3D plot
fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
ax = fig.add_subplot(111, projection='3d')

# Plot all (x, y) values for each z value
for z in z_values:
    ax.plot(x_values, y_values, z, marker='', linestyle='-')

# Set plot title and labels
ax.set_title('3D Plot of Points with Varying Z-values')
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_zlabel('Z-axis')

# Set x-axis ticks and grid in increments of 0.01
x_ticks = np.arange(0, 12.51, 0.5)
ax.set_xticks(x_ticks)
ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# Set y-axis ticks and grid to match x-axis
y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
ax.set_yticks(y_ticks)
ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# Ensure equal aspect ratio
ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# Show the plot
plt.show()

def calculate_area1(points1):
    sum = 0
    for i in range(len(points1)-1):
         sum += sqrt((points1[i][0] - points1[i + 1][0])**2 + (points1[i][1] - points1[i + 1][1])**2)
    area = sum * 75
    return area

def calculate_area2(points2):
    sum = 0
    for i in range(len(points2)-1):
         sum += sqrt((points2[i][0] - points2[i + 1][0])**2 + (points2[i][1] - points2[i+1][1])**2)
    area = sum * 75
    return area

# Your data points
points1 = [
    (1.0000000*12.5, 0.0016800),
    (0.9974774*12.5, 0.0022069),
    (0.9929085*12.5, 0.0031575),
    (0.9870521*12.5, 0.0043690),
    (0.9801884*12.5, 0.0057790),
    (0.9724844*12.5, 0.0073492),
    (0.9640559*12.5, 0.0090522),
    (0.9549902*12.5, 0.0108669),
    (0.9453566*12.5, 0.0127762),
    (0.9352124*12.5, 0.0147658),
    (0.9246063*12.5, 0.0168235),
    (0.9135802*12.5, 0.0189389),
    (0.9021712*12.5, 0.0211024),
    (0.8904123*12.5, 0.0233059),
    (0.8783331*12.5, 0.0255420),
    (0.8659609*12.5, 0.0278039),
    (0.8533205*12.5, 0.0300856),
    (0.8404347*12.5, 0.0323814),
    (0.8273250*12.5, 0.0346864),
    (0.8140113*12.5, 0.0369956),
    (0.8005122*12.5, 0.0393047),
    (0.7868454*12.5, 0.0416096),
    (0.7730275*12.5, 0.0439063),
    (0.7590742*12.5, 0.0461911),
    (0.7450005*12.5, 0.0484605),
    (0.7308209*12.5, 0.0507112),
    (0.7165489*12.5, 0.0529398),
    (0.7021977*12.5, 0.0551432),
    (0.6877799*12.5, 0.0573183),
    (0.6733075*12.5, 0.0594621),
    (0.6587922*12.5, 0.0615717),
    (0.6442453*12.5, 0.0636441),
    (0.6296777*12.5, 0.0656764),
    (0.6150998*12.5, 0.0676659),
    (0.6005219*12.5, 0.0696097),
    (0.5859539*12.5, 0.0715051),
    (0.5714054*12.5, 0.0733492),
    (0.5568856*12.5, 0.0751393),
    (0.5424038*12.5, 0.0768727),
    (0.5279688*12.5, 0.0785468),
    (0.5135891*12.5, 0.0801588),
    (0.4992733*12.5, 0.0817061),
    (0.4850295*12.5, 0.0831861),
    (0.4708659*12.5, 0.0845963),
    (0.4567901*12.5, 0.0859341),
    (0.4428100*12.5, 0.0871972),
    (0.4289331*12.5, 0.0883831),
    (0.4151667*12.5, 0.0894896),
    (0.4015181*12.5, 0.0905144),
    (0.3879944*12.5, 0.0914554),
    (0.3746025*12.5, 0.0923105),
    (0.3613493*12.5, 0.0930778),
    (0.3482415*12.5, 0.0937555),
    (0.3352856*12.5, 0.0943418),
    (0.3224882*12.5, 0.0948352),
    (0.3098556*12.5, 0.0952342),
    (0.2973941*12.5, 0.0955375),
    (0.2851099*12.5, 0.0957439),
    (0.2730090*12.5, 0.0958523),
    (0.2610975*12.5, 0.0958620),
    (0.2493812*12.5, 0.0957722),
    (0.2378660*12.5, 0.0955822),
    (0.2265575*12.5, 0.0952918),
    (0.2154615*12.5, 0.0949007),
    (0.2045835*12.5, 0.0944088),
    (0.1939290*12.5, 0.0938145),
    (0.1835034*12.5, 0.0931048),
    (0.1733122*12.5, 0.0922638),
    (0.1633605*12.5, 0.0912779),
    (0.1536536*12.5, 0.0901360),
    (0.1441967*12.5, 0.0888296),
    (0.1349949*12.5, 0.0873525),
    (0.1260533*12.5, 0.0857005),
    (0.1173767*12.5, 0.0838719),
    (0.1089702*12.5, 0.0818669),
    (0.1008386*12.5, 0.0796875),
    (0.0929867*12.5, 0.0773377),
    (0.0854193*12.5, 0.0748230),
    (0.0781412*12.5, 0.0721505),
    (0.0711569*12.5, 0.0693286),
    (0.0644712*12.5, 0.0663672),
    (0.0580885*12.5, 0.0632768),
    (0.0520135*12.5, 0.0600692),
    (0.0462506*12.5, 0.0567567),
    (0.0408043*12.5, 0.0533525),
    (0.0356789*12.5, 0.0498697),
    (0.0308789*12.5, 0.0463222),
    (0.0264085*12.5, 0.0427237),
    (0.0222721*12.5, 0.0390879),
    (0.0184738*12.5, 0.0354281),
    (0.0150180*12.5, 0.0317575),
    (0.0119087*12.5, 0.0280884),
    (0.0091501*12.5, 0.0244329),
    (0.0067463*12.5, 0.0208016),
    (0.0047014*12.5, 0.0172047),
    (0.0030194*12.5, 0.0136510),
    (0.0017043*12.5, 0.0101482),
    (0.0007601*12.5, 0.0067024),
    (0.0001907*12.5, 0.0033186),
    (0.0000000, 0.0000000)]

points2=[
    (0.0001907*12.5, -0.0032023),
    (0.0007601*12.5, -0.0062405),
    (0.0017043*12.5, -0.0091176),
    (0.0030194*12.5, -0.0118380),
    (0.0047014*12.5, -0.0144070),
    (0.0067463*12.5, -0.0168307),
    (0.0091501*12.5, -0.0191162),
    (0.0119087*12.5, -0.0212714),
    (0.0150180*12.5, -0.0233047),
    (0.0184738*12.5, -0.0252252),
    (0.0222721*12.5, -0.0270422),
    (0.0264085*12.5, -0.0287656),
    (0.0308789*12.5, -0.0304053),
    (0.0356789*12.5, -0.0319714),
    (0.0408043*12.5, -0.0334736),
    (0.0462506*12.5, -0.0349219),
    (0.0520135*12.5, -0.0363256),
    (0.0580885*12.5, -0.0376937),
    (0.0644712*12.5, -0.0390345),
    (0.0711569*12.5, -0.0403555),
    (0.0781412*12.5, -0.0416637),
    (0.0854193*12.5, -0.0429646),
    (0.0929867*12.5, -0.0442630),
    (0.1008386*12.5, -0.0455621),
    (0.1089702*12.5, -0.0468640),
    (0.1173767*12.5, -0.0481692),
    (0.1260533*12.5, -0.0494766),
    (0.1349949*12.5, -0.0507834),
    (0.1441967*12.5, -0.0520849),
    (0.1536536*12.5, -0.0533747),
    (0.1633605*12.5, -0.0546443),
    (0.1733122*12.5, -0.0558831),
    (0.1835034*12.5, -0.0570785),
    (0.1939290*12.5, -0.0582155),
    (0.2045835*12.5, -0.0592770),
    (0.2154615*12.5, -0.0602494),
    (0.2265575*12.5, -0.0611306),
    (0.2378660*12.5, -0.0619205),
    (0.2493812*12.5, -0.0626190),
    (0.2610975*12.5, -0.0632264),
    (0.2730090*12.5, -0.0637428),
    (0.2851099*12.5, -0.0641688),
    (0.2973941*12.5, -0.0645050),
    (0.3098556*12.5, -0.0647521),
    (0.3224882*12.5, -0.0649111),
    (0.3352856*12.5, -0.0649829),
    (0.3482415*12.5, -0.0649688),
    (0.3613493*12.5, -0.0648701),
    (0.3746025*12.5, -0.0646881),
    (0.3879944*12.5, -0.0644245),
    (0.4015181*12.5, -0.0640808),
    (0.4151667*12.5, -0.0636588),
    (0.4289331*12.5, -0.0631604),
    (0.4428100*12.5, -0.0625874),
    (0.4567901*12.5, -0.0619418),
    (0.4708659*12.5, -0.0612256),
    (0.4850295*12.5, -0.0604410),
    (0.4992733*12.5, -0.0595901),
    (0.5135891*12.5, -0.0586751),
    (0.5279688*12.5, -0.0576982),
    (0.5424038*12.5, -0.0566618),
    (0.5568856*12.5, -0.0555680),
    (0.5714054*12.5, -0.0544191),
    (0.5859539*12.5, -0.0532176),
    (0.6005219*12.5, -0.0519657),
    (0.6150998*12.5, -0.0506658),
    (0.6296777*12.5, -0.0493201),
    (0.6442453*12.5, -0.0479312),
    (0.6587922*12.5, -0.0465013),
    (0.6733075*12.5, -0.0450328),
    (0.6877799*12.5, -0.0435282),
    (0.7021977*12.5, -0.0419899),
    (0.7165489*12.5, -0.0404204),
    (0.7308209*12.5, -0.0388221),
    (0.7450005*12.5, -0.0371978),
    (0.7590742*12.5, -0.0355499),
    (0.7730275*12.5, -0.0338814),
    (0.7868454*12.5, -0.0321950),
    (0.8005122*12.5, -0.0304938),
    (0.8140113*12.5, -0.0287809),
    (0.8273250*12.5, -0.0270597),
    (0.8404347*12.5, -0.0253338),
    (0.8533205*12.5, -0.0236071),
    (0.8659609*12.5, -0.0218837),
    (0.8783331*12.5, -0.0201682),
    (0.8904123*12.5, -0.0184657),
    (0.9021712*12.5, -0.0167815),
    (0.9135802*12.5, -0.0151219),
    (0.9246063*12.5, -0.0134936),
    (0.9352124*12.5, -0.0119043),
    (0.9453566*12.5, -0.0103627),
    (0.9549902*12.5, -0.0088789),
    (0.9640559*12.5, -0.0074646),
    (0.9724844*12.5, -0.0061339),
    (0.9801884*12.5, -0.0049040),
    (0.9870521*12.5, -0.0037971),
    (0.9929085*12.5, -0.0028443),
    (0.9974774*12.5, -0.0020955),
    (1.0000000*12.5, -0.0016800)
]

# Calculate area
area1 = calculate_area1(points1)
area2 = calculate_area2(points2)
print("Area of the closed figure:", area1 + area2)
