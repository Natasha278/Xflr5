import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
    (1.000006, 0.00126),
    (0.999322, 0.00136),
    (0.99727, 0.001658),
    (0.993856, 0.002153),
    (0.98909, 0.002843),
    (0.982986, 0.003723),
    (0.97556, 0.004789),
    (0.966834, 0.006035),
    (0.956831, 0.007455),
    (0.945581, 0.009042),
    (0.933114, 0.010787),
    (0.919464, 0.012683),
    (0.904671, 0.014721),
    (0.888775, 0.016891),
    (0.871819, 0.019184),
    (0.853852, 0.021589),
    (0.834921, 0.024096),
    (0.81508, 0.026695),
    (0.794383, 0.029373),
    (0.772886, 0.032119),
    (0.750648, 0.03492),
    (0.72773, 0.037763),
    (0.704194, 0.040634),
    (0.680104, 0.043518),
    (0.655525, 0.046401),
    (0.630525, 0.049266),
    (0.60517, 0.052095),
    (0.57953, 0.05487),
    (0.553674, 0.057574),
    (0.527671, 0.060186),
    (0.501592, 0.062686),
    (0.475508, 0.065055),
    (0.449488, 0.067272),
    (0.423604, 0.069316),
    (0.397925, 0.071169),
    (0.372521, 0.07281),
    (0.347461, 0.074221),
    (0.322813, 0.075386),
    (0.298645, 0.076289),
    (0.275022, 0.076917),
    (0.252008, 0.077258),
    (0.229667, 0.077304),
    (0.208021, 0.077046),
    (0.186846, 0.076424),
    (0.166208, 0.07531),
    (0.146246, 0.073603),
    (0.127102, 0.071238),
    (0.108917, 0.068189),
    (0.091825, 0.064466),
    (0.075952, 0.060115),
    (0.061409, 0.055211),
    (0.048288, 0.049855),
    (0.036662, 0.044161),
    (0.026586, 0.038255),
    (0.018089, 0.032261),
    (0.011185, 0.026299),
    (0.005872, 0.020474),
    (0.002131, 0.014875),
    (-6.8e-05, 0.009571),
    (-0.000762, 0.004606),
    (0.0, 0.0),
    (0.002133, -0.004151),
    (0.005546, -0.007772),
    (0.010181, -0.010904),
    (0.01598, -0.013598),
    (0.022889, -0.015916),
    (0.030855, -0.017927),
    (0.039834, -0.019703),
    (0.049792, -0.021313),
    (0.060706, -0.022825),
    (0.072566, -0.0243),
    (0.085377, -0.02579),
    (0.099158, -0.027339),
    (0.113937, -0.028977),
    (0.129753, -0.030719),
    (0.146647, -0.032563),
    (0.164661, -0.034483),
    (0.183833, -0.03643),
    (0.204194, -0.038319),
    (0.225694, -0.040034),
    (0.247992, -0.041499),
    (0.270988, -0.042711),
    (0.294618, -0.043673),
    (0.318819, -0.044389),
    (0.343522, -0.044863),
    (0.36866, -0.045104),
    (0.394163, -0.045121),
    (0.419962, -0.044922),
    (0.445983, -0.044519),
    (0.472156, -0.043923),
    (0.498408, -0.043146),
    (0.524665, -0.042202),
    (0.550855, -0.041102),
    (0.576904, -0.039859),
    (0.602741, -0.038488),
    (0.628294, -0.037),
    (0.653492, -0.035408),
    (0.678264, -0.033727),
    (0.702543, -0.031969),
    (0.726261, -0.030146),
    (0.749352, -0.028273),
    (0.771753, -0.026363),
    (0.793402, -0.024429),
    (0.81424, -0.022484),
    (0.834209, -0.020544),
    (0.853255, -0.018621),
    (0.871326, -0.016731),
    (0.888371, -0.014888),
    (0.904346, -0.013106),
    (0.919206, -0.0114),
    (0.932912, -0.009784),
    (0.945426, -0.008273),
    (0.956714, -0.00688),
    (0.966747, -0.005617),
    (0.975496, -0.004496),
    (0.98294, -0.003528),
    (0.989057, -0.002723),
    (0.993832, -0.002088),
    (0.997252, -0.001629),
    (0.999308, -0.001353),
    (0.999994, -0.00126)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# Multiply all x and y values by the calculated factor
x_values = [x * factor for x in x_values]
y_values = [y * factor for y in y_values]

# Generate more z values for smoother representation
z_values = np.linspace(0, 6, 10000)

# Create a 3D plot
fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
ax = fig.add_subplot(111, projection='3d')

# Plot all (x, y) values for each z value
for z in z_values:
    ax.plot(x_values, y_values, z, marker='', linestyle='-')

# Set plot title and labels
ax.set_title('3D Plot of Points with Varying Z-values')
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_zlabel('Z-axis')

# Set x-axis ticks and grid in increments of 0.01
x_ticks = np.arange(0, 12.51, 0.5)
ax.set_xticks(x_ticks)
ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# Set y-axis ticks and grid to match x-axis
y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
ax.set_yticks(y_ticks)
ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# Ensure equal aspect ratio
ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# Show the plot
plt.show()

def calculate_area1(points1):
    sum = 0
    for i in range(len(points1)-1):
         sum += sqrt((points1[i][0] - points1[i + 1][0])**2 + (points1[i][1] - points1[i + 1][1])**2)
    area = sum * 75
    return area

def calculate_area2(points2):
    sum = 0
    for i in range(len(points2)-1):
         sum += sqrt((points2[i][0] - points2[i + 1][0])**2 + (points2[i][1] - points2[i+1][1])**2)
    area = sum * 75
    return area

# Your data points
points1 = [
    (12.5, 0.00126),
(12.498636236384476, 0.00136),
(12.49373015693335, 0.001658),
(12.480123905383155, 0.002153),
(12.4610362564468, 0.002843),
(12.287607982197243, 0.003723),
(12.204185425783946, 0.004789),
(12.120225760270242, 0.006035),
(12.031791970972192, 0.007455),
(11.819988649072394, 0.009042),
(11.53145160154082, 0.010787),
(11.493813044759124, 0.012683),
(11.307142694281593, 0.014721),
(11.11040581978238, 0.016891),
(10.897093243267713, 0.019184),
(10.548758619046677, 0.021589),
(10.3484808899933, 0.024096),
(10.14856792058534, 0.026695),
(9.92707041591367, 0.029373),
(9.64190540726304, 0.032119),
(9.383310594585129, 0.03492),
(9.095915524283722, 0.037763),
(8.801267909855942, 0.040634),
(8.50130546896414, 0.043518),
(8.193155100424785, 0.046401),
(7.881656576829342, 0.049266),
(7.568250050774958, 0.052095),
(7.263162476276682, 0.05487),
(6.921092992331557, 0.057574),
(6.595838728744399, 0.060186),
(6.270335906628717, 0.062686),
(5.938850533702536, 0.065055),
(5.618107862953808, 0.067272),
(5.298768451354663, 0.069316),
(4.98103719476333, 0.071169),
(4.664912748961186, 0.07281),
(4.349021282119585, 0.074221),
(4.033841076737998, 0.075386),
(3.720581152828581, 0.076289),
(3.409080162952667, 0.076917),
(3.150272614315101, 0.077258),
(2.8708532025006, 0.077304),
(2.600351266235856, 0.077046),
(2.335573244844143, 0.076424),
(2.07759930618815, 0.07531),
(1.8270785648891967, 0.073603),
(1.5887721995966484, 0.071238),
(1.3614734773499138, 0.068189),
(1.1487818326858584, 0.064466),
(0.9494031832024436, 0.060115),
(0.767611845881006, 0.055211),
(0.6036006019935087, 0.049855),
(0.4570458761341512, 0.044161),
(0.3323230448506043, 0.038255),
(0.22648245869679882, 0.032261),
(0.1402281359725138, 0.026299),
(0.07315002026423824, 0.020474),
(0.026631096313861482, 0.014875),
(-0.0008530592823333185, 0.009571),
(-0.009579550793915495, 0.004606),
(0.0, 0.0)
]

points2=[
    (0.02663316079717292, -0.004151),
(0.06932434502446252, -0.007772),
(0.12726234979379363, -0.010904),
(0.1997259450327458, -0.013598),
(0.2861108769820938, -0.015916),
(0.38473714120413916, -0.017927),
(0.49628775289001654, -0.019703),
(0.6180036872899473, -0.021313),
(0.7482678991701542, -0.022825),
(0.8869572868304462, -0.0243),
(1.0330831945465275, -0.02579),
(1.186487633581011, -0.027339),
(1.3445543469916977, -0.028977),
(1.505855940865242, -0.030719),
(1.6688334502834773, -0.032563),
(1.8321550577791556, -0.034483),
(1.9947020101194976, -0.03643),
(2.155552743773198, -0.038319),
(2.3134882880400995, -0.040034),
(2.4677846484698527, -0.041499),
(2.6173684036224977, -0.042711),
(2.761981987579406, -0.043673),
(2.900347558291707, -0.044389),
(3.031212794783418, -0.044863),
(3.153353416184105, -0.045104),
(3.265622665942014, -0.045121),
(3.366923832131449, -0.044922),
(3.456223976018612, -0.044519),
(3.532553668786344, -0.043923),
(3.5949877457817846, -0.043146),
(3.642657671481308, -0.042202),
(3.674758614956004, -0.041102),
(3.690556819023159, -0.039859),
(3.6893870921263026, -0.038488),
(3.670658648637937, -0.037),
(3.6338764745226216, -0.035408),
(3.578642352390518, -0.033727),
(3.5046416887969547, -0.031969),
(3.411628614677687, -0.030146),
(3.2994258435976646, -0.028273),
(3.167916968891323, -0.026363),
(3.017028176651455, -0.024429),
(2.846720254672438, -0.022484),
(2.657986132772227, -0.020544),
(2.451844956731963, -0.018621),
(2.2293100902663164, -0.016731),
(1.9914290478956835, -0.014888),
(1.7392719203668901, -0.013106),
(1.4739198486312482, -0.0114),
(1.1964775510074216, -0.009784),
(0.9080769067256252, -0.008273),
(0.6098880159729079, -0.00688),
(0.303106984566071, -0.005617),
(0.0, -0.004496),
(-0.2901458971269531, -0.003528),
(-0.5662811586219975, -0.002723),
(-0.822417755147114, -0.002088),
(-1.0528113492714974, -0.001629),
(-1.2529411369569525, -0.001353),
(-1.4189905961735348, -0.00126)
]

# Calculate area
area1 = calculate_area1(points1)
area2 = calculate_area2(points2)
print("Area of the closed figure:", area1 + area2)
