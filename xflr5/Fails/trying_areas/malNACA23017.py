import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt
import numpy as np

# Your data points
points = [
    (1.0000000, 0.0017850),
    (0.9974774, 0.0023413),
    (0.9929085, 0.0033450),
    (0.9870521, 0.0046242),
    (0.9801884, 0.0061129),
    (0.9724844, 0.0077706),
    (0.9640559, 0.0095684),
    (0.9549902, 0.0114839),
    (0.9453566, 0.0134993),
    (0.9352124, 0.0155992),
    (0.9246063, 0.0177710),
    (0.9135802, 0.0200033),
    (0.9021712, 0.0222863),
    (0.8904123, 0.0246113),
    (0.8783331, 0.0269704),
    (0.8659609, 0.0293566),
    (0.8533205, 0.0317635),
    (0.8404347, 0.0341850),
    (0.8273250, 0.0366159),
    (0.8140113, 0.0390511),
    (0.8005122, 0.0414859),
    (0.7868454, 0.0439159),
    (0.7730275, 0.0463371),
    (0.7590742, 0.0487455),
    (0.7450005, 0.0511373),
    (0.7308209, 0.0535091),
    (0.7165489, 0.0558573),
    (0.7021977, 0.0581786),
    (0.6877799, 0.0604698),
    (0.6733075, 0.0627276),
    (0.6587922, 0.0649489),
    (0.6442453, 0.0671308),
    (0.6296777, 0.0692701),
    (0.6150998, 0.0713638),
    (0.6005219, 0.0734090),
    (0.5859539, 0.0754027),
    (0.5714054, 0.0773419),
    (0.5568856, 0.0792239),
    (0.5424038, 0.0810457),
    (0.5279688, 0.0828044),
    (0.5135891, 0.0844973),
    (0.4992733, 0.0861216),
    (0.4850295, 0.0876744),
    (0.4708659, 0.0891532),
    (0.4567901, 0.0905552),
    (0.4428100, 0.0918780),
    (0.4289331, 0.0931189),
    (0.4151667, 0.0942755),
    (0.4015181, 0.0953455),
    (0.3879944, 0.0963266),
    (0.3746025, 0.0972167),
    (0.3613493, 0.0980137),
    (0.3482415, 0.0987156),
    (0.3352856, 0.0993207),
    (0.3224882, 0.0998273),
    (0.3098556, 0.1002338),
    (0.2973941, 0.1005388),
    (0.2851099, 0.1007412),
    (0.2730090, 0.1008397),
    (0.2610975, 0.1008335),
    (0.2493812, 0.1007219),
    (0.2378660, 0.1005042),
    (0.2265575, 0.1001800),
    (0.2154615, 0.0997491),
    (0.2045835, 0.0992114),
    (0.1939290, 0.0985654),
    (0.1835034, 0.0977980),
    (0.1733122, 0.0968934),
    (0.1633605, 0.0958379),
    (0.1536536, 0.0946207),
    (0.1441967, 0.0932332),
    (0.1349949, 0.0916692),
    (0.1260533, 0.0899248),
    (0.1173767, 0.0879982),
    (0.1089702, 0.0858897),
    (0.1008386, 0.0836015),
    (0.0929867, 0.0811377),
    (0.0854193, 0.0785038),
    (0.0781412, 0.0757072),
    (0.0711569, 0.0727563),
    (0.0644712, 0.0696610),
    (0.0580885, 0.0664321),
    (0.0520135, 0.0630815),
    (0.0462506, 0.0596217),
    (0.0408043, 0.0560658),
    (0.0356789, 0.0524273),
    (0.0308789, 0.0487200),
    (0.0264085, 0.0449578),
    (0.0222721, 0.0411544),
    (0.0184738, 0.0373235),
    (0.0150180, 0.0334782),
    (0.0119087, 0.0296309),
    (0.0091501, 0.0257938),
    (0.0067463, 0.0219776),
    (0.0047014, 0.0181926),
    (0.0030194, 0.0144476),
    (0.0017043, 0.0107502),
    (0.0007601, 0.0071069),
    (0.0001907, 0.0035223),
    (0.0000000, 0.0000000),
    (0.0001907, -0.0034061),
    (0.0007601, -0.0066450),
    (0.0017043, -0.0097197),
    (0.0030194, -0.0126346),
    (0.0047014, -0.0153948),
    (0.0067463, -0.0180067),
    (0.0091501, -0.0204771),
    (0.0119087, -0.0228139),
    (0.0150180, -0.0250254),
    (0.0184738, -0.0271206),
    (0.0222721, -0.0291088),
    (0.0264085, -0.0309997),
    (0.0308789, -0.0328031),
    (0.0356789, -0.0345289),
    (0.0408043, -0.0361870),
    (0.0462506, -0.0377869),
    (0.0520135, -0.0393380),
    (0.0580885, -0.0408490),
    (0.0644712, -0.0423283),
    (0.0711569, -0.0437832),
    (0.0781412, -0.0452204),
    (0.0854193, -0.0466455),
    (0.0929867, -0.0480630),
    (0.1008386, -0.0494762),
    (0.1089702, -0.0508869),
    (0.1173767, -0.0522955),
    (0.1260533, -0.0537009),
    (0.1349949, -0.0551001),
    (0.1441967, -0.0564885),
    (0.1536536, -0.0578594),
    (0.1633605, -0.0592044),
    (0.1733122, -0.0605127),
    (0.1835034, -0.0617717),
    (0.1939290, -0.0629664),
    (0.2045835, -0.0640797),
    (0.2154615, -0.0650978),
    (0.2265575, -0.0660188),
    (0.2378660, -0.0668425),
    (0.2493812, -0.0675688),
    (0.2610975, -0.0681979),
    (0.2730090, -0.0687302),
    (0.2851099, -0.0691661),
    (0.2973941, -0.0695063),
    (0.3098556, -0.0697517),
    (0.3224882, -0.0699031),
    (0.3352856, -0.0699618),
    (0.3482415, -0.0699289),
    (0.3613493, -0.0698059),
    (0.3746025, -0.0695943),
    (0.3879944, -0.0692957),
    (0.4015181, -0.0689119),
    (0.4151667, -0.0684447),
    (0.4289331, -0.0678961),
    (0.4428100, -0.0672681),
    (0.4567901, -0.0665629),
    (0.4708659, -0.0657825),
    (0.4850295, -0.0649293),
    (0.4992733, -0.0640056),
    (0.5135891, -0.0630137),
    (0.5279688, -0.0619559),
    (0.5424038, -0.0608347),
    (0.5568856, -0.0596526),
    (0.5714054, -0.0584119),
    (0.5859539, -0.0571152),
    (0.6005219, -0.0557649),
    (0.6150998, -0.0543636),
    (0.6296777, -0.0529138),
    (0.6442453, -0.0514179),
    (0.6587922, -0.0498786),
    (0.6733075, -0.0482983),
    (0.6877799, -0.0466797),
    (0.7021977, -0.0450253),
    (0.7165489, -0.0433379),
    (0.7308209, -0.0416201),
    (0.7450005, -0.0398746),
    (0.7590742, -0.0381043),
    (0.7730275, -0.0363123),
    (0.7868454, -0.0345014),
    (0.8005122, -0.0326750),
    (0.8140113, -0.0308364),
    (0.8273250, -0.0289893),
    (0.8404347, -0.0271374),
    (0.8533205, -0.0252850),
    (0.8659609, -0.0234364),
    (0.8783331, -0.0215967),
    (0.8904123, -0.0197711),
    (0.9021712, -0.0179654),
    (0.9135802, -0.0161863),
    (0.9246063, -0.0144410),
    (0.9352124, -0.0127377),
    (0.9453566, -0.0110858),
    (0.9549902, -0.0094960),
    (0.9640559, -0.0079808),
    (0.9724844, -0.0065553),
    (0.9801884, -0.0052378),
    (0.9870521, -0.0040523),
    (0.9929085, -0.0030318),
    (0.9974774, -0.0022299),
    (1.0000000, -0.0017850)
]
# Separate x and y coordinates
x_values, y_values = zip(*points)

# Find the maximum x value
max_x = max(x_values)

# Calculate the factor to transform the maximum x to 12.5
factor = 12.5 / max_x

# Multiply all x and y values by the calculated factor
x_values = [x * factor for x in x_values]
y_values = [y * factor for y in y_values]

# Generate more z values for smoother representation
z_values = np.linspace(0, 6, 10000)

# Create a 3D plot
fig = plt.figure(figsize=(10, 8))  # Adjust the figure size as needed
ax = fig.add_subplot(111, projection='3d')

# Plot all (x, y) values for each z value
for z in z_values:
    ax.plot(x_values, y_values, z, marker='', linestyle='-')

# Set plot title and labels
ax.set_title('3D Plot of Points with Varying Z-values')
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_zlabel('Z-axis')

# Set x-axis ticks and grid in increments of 0.01
x_ticks = np.arange(0, 12.51, 0.5)
ax.set_xticks(x_ticks)
ax.set_xticklabels(["{:.2f}".format(tick) for tick in x_ticks], rotation=45)

# Set y-axis ticks and grid to match x-axis
y_ticks = np.arange(min(y_values), max(y_values) + 0.01, 0.01)
ax.set_yticks(y_ticks)
ax.set_yticklabels(["{:.2f}".format(tick) for tick in y_ticks], rotation=45)

# Ensure equal aspect ratio
ax.set_box_aspect([np.ptp(arr) for arr in [x_values, y_values, z_values]])

# Show the plot
plt.show()

def calculate_area1(points1):
    sum = 0
    for i in range(len(points1)-1):
         sum += sqrt((points1[i][0] - points1[i + 1][0])**2 + (points1[i][1] - points1[i + 1][1])**2)
    area = sum * 75
    return area

def calculate_area2(points2):
    sum = 0
    for i in range(len(points2)-1):
         sum += sqrt((points2[i][0] - points2[i + 1][0])**2 + (points2[i][1] - points2[i+1][1])**2)
    area = sum * 75
    return area

# Your data points
points1 = [
    (1.0000000*12.5, 0.0017850),
    (0.9974774*12.5, 0.0023413),
    (0.9929085*12.5, 0.0033450),
    (0.9870521*12.5, 0.0046242),
    (0.9801884*12.5, 0.0061129),
    (0.9724844*12.5, 0.0077706),
    (0.9640559*12.5, 0.0095684),
    (0.9549902*12.5, 0.0114839),
    (0.9453566*12.5, 0.0134993),
    (0.9352124*12.5, 0.0155992),
    (0.9246063*12.5, 0.0177710),
    (0.9135802*12.5, 0.0200033),
    (0.9021712*12.5, 0.0222863),
    (0.8904123*12.5, 0.0246113),
    (0.8783331*12.5, 0.0269704),
    (0.8659609*12.5, 0.0293566),
    (0.8533205*12.5, 0.0317635),
    (0.8404347*12.5, 0.0341850),
    (0.8273250*12.5, 0.0366159),
    (0.8140113*12.5, 0.0390511),
    (0.8005122*12.5, 0.0414859),
    (0.7868454*12.5, 0.0439159),
    (0.7730275*12.5, 0.0463371),
    (0.7590742*12.5, 0.0487455),
    (0.7450005*12.5, 0.0511373),
    (0.7308209*12.5, 0.0535091),
    (0.7165489*12.5, 0.0558573),
    (0.7021977*12.5, 0.0581786),
    (0.6877799*12.5, 0.0604698),
    (0.6733075*12.5, 0.0627276),
    (0.6587922*12.5, 0.0649489),
    (0.6442453*12.5, 0.0671308),
    (0.6296777*12.5, 0.0692701),
    (0.6150998*12.5, 0.0713638),
    (0.6005219*12.5, 0.0734090),
    (0.5859539*12.5, 0.0754027),
    (0.5714054*12.5, 0.0773419),
    (0.5568856*12.5, 0.0792239),
    (0.5424038*12.5, 0.0810457),
    (0.5279688*12.5, 0.0828044),
    (0.5135891*12.5, 0.0844973),
    (0.4992733*12.5, 0.0861216),
    (0.4850295*12.5, 0.0876744),
    (0.4708659*12.5, 0.0891532),
    (0.4567901*12.5, 0.0905552),
    (0.4428100*12.5, 0.0918780),
    (0.4289331*12.5, 0.0931189),
    (0.4151667*12.5, 0.0942755),
    (0.4015181*12.5, 0.0953455),
    (0.3879944*12.5, 0.0963266),
    (0.3746025*12.5, 0.0972167),
    (0.3613493*12.5, 0.0980137),
    (0.3482415*12.5, 0.0987156),
    (0.3352856*12.5, 0.0993207),
    (0.3224882*12.5, 0.0998273),
    (0.3098556*12.5, 0.1002338),
    (0.2973941*12.5, 0.1005388),
    (0.2851099*12.5, 0.1007412),
    (0.2730090*12.5, 0.1008397),
    (0.2610975*12.5, 0.1008335),
    (0.2493812*12.5, 0.1007219),
    (0.2378660*12.5, 0.1005042),
    (0.2265575*12.5, 0.1001800),
    (0.2154615*12.5, 0.0997491),
    (0.2045835*12.5, 0.0992114),
    (0.1939290*12.5, 0.0985654),
    (0.1835034*12.5, 0.0977980),
    (0.1733122*12.5, 0.0968934),
    (0.1633605*12.5, 0.0958379),
    (0.1536536*12.5, 0.0946207),
    (0.1441967*12.5, 0.0932332),
    (0.1349949*12.5, 0.0916692),
    (0.1260533*12.5, 0.0899248),
    (0.1173767*12.5, 0.0879982),
    (0.1089702*12.5, 0.0858897),
    (0.1008386*12.5, 0.0836015),
    (0.0929867*12.5, 0.0811377),
    (0.0854193*12.5, 0.0785038),
    (0.0781412*12.5, 0.0757072),
    (0.0711569*12.5, 0.0727563),
    (0.0644712*12.5, 0.0696610),
    (0.0580885*12.5, 0.0664321),
    (0.0520135*12.5, 0.0630815),
    (0.0462506*12.5, 0.0596217),
    (0.0408043*12.5, 0.0560658),
    (0.0356789*12.5, 0.0524273),
    (0.0308789*12.5, 0.0487200),
    (0.0264085*12.5, 0.0449578),
    (0.0222721*12.5, 0.0411544),
    (0.0184738*12.5, 0.0373235),
    (0.0150180*12.5, 0.0334782),
    (0.0119087*12.5, 0.0296309),
    (0.0091501*12.5, 0.0257938),
    (0.0067463*12.5, 0.0219776),
    (0.0047014*12.5, 0.0181926),
    (0.0030194*12.5, 0.0144476),
    (0.0017043*12.5, 0.0107502),
    (0.0007601*12.5, 0.0071069),
    (0.0001907*12.5, 0.0035223),
    (0.0000000, 0.0000000)]

points2=[
    (0.0001907*12.5, -0.0034061),
    (0.0007601*12.5, -0.0066450),
    (0.0017043*12.5, -0.0097197),
    (0.0030194*12.5, -0.0126346),
    (0.0047014*12.5, -0.0153948),
    (0.0067463*12.5, -0.0180067),
    (0.0091501*12.5, -0.0204771),
    (0.0119087*12.5, -0.0228139),
    (0.0150180*12.5, -0.0250254),
    (0.0184738*12.5, -0.0271206),
    (0.0222721*12.5, -0.0291088),
    (0.0264085*12.5, -0.0309997),
    (0.0308789*12.5, -0.0328031),
    (0.0356789*12.5, -0.0345289),
    (0.0408043*12.5, -0.0361870),
    (0.0462506*12.5, -0.0377869),
    (0.0520135*12.5, -0.0393380),
    (0.0580885*12.5, -0.0408490),
    (0.0644712*12.5, -0.0423283),
    (0.0711569*12.5, -0.0437832),
    (0.0781412*12.5, -0.0452204),
    (0.0854193*12.5, -0.0466455),
    (0.0929867*12.5, -0.0480630),
    (0.1008386*12.5, -0.0494762),
    (0.1089702*12.5, -0.0508869),
    (0.1173767*12.5, -0.0522955),
    (0.1260533*12.5, -0.0537009),
    (0.1349949*12.5, -0.0551001),
    (0.1441967*12.5, -0.0564885),
    (0.1536536*12.5, -0.0578594),
    (0.1633605*12.5, -0.0592044),
    (0.1733122*12.5, -0.0605127),
    (0.1835034*12.5, -0.0617717),
    (0.1939290*12.5, -0.0629664),
    (0.2045835*12.5, -0.0640797),
    (0.2154615*12.5, -0.0650978),
    (0.2265575*12.5, -0.0660188),
    (0.2378660*12.5, -0.0668425),
    (0.2493812*12.5, -0.0675688),
    (0.2610975*12.5, -0.0681979),
    (0.2730090*12.5, -0.0687302),
    (0.2851099*12.5, -0.0691661),
    (0.2973941*12.5, -0.0695063),
    (0.3098556*12.5, -0.0697517),
    (0.3224882*12.5, -0.0699031),
    (0.3352856*12.5, -0.0699618),
    (0.3482415*12.5, -0.0699289),
    (0.3613493*12.5, -0.0698059),
    (0.3746025*12.5, -0.0695943),
    (0.3879944*12.5, -0.0692957),
    (0.4015181*12.5, -0.0689119),
    (0.4151667*12.5, -0.0684447),
    (0.4289331*12.5, -0.0678961),
    (0.4428100*12.5, -0.0672681),
    (0.4567901*12.5, -0.0665629),
    (0.4708659*12.5, -0.0657825),
    (0.4850295*12.5, -0.0649293),
    (0.4992733*12.5, -0.0640056),
    (0.5135891*12.5, -0.0630137),
    (0.5279688*12.5, -0.0619559),
    (0.5424038*12.5, -0.0608347),
    (0.5568856*12.5, -0.0596526),
    (0.5714054*12.5, -0.0584119),
    (0.5859539*12.5, -0.0571152),
    (0.6005219*12.5, -0.0557649),
    (0.6150998*12.5, -0.0543636),
    (0.6296777*12.5, -0.0529138),
    (0.6442453*12.5, -0.0514179),
    (0.6587922*12.5, -0.0498786),
    (0.6733075*12.5, -0.0482983),
    (0.6877799*12.5, -0.0466797),
    (0.7021977*12.5, -0.0450253),
    (0.7165489*12.5, -0.0433379),
    (0.7308209*12.5, -0.0416201),
    (0.7450005*12.5, -0.0398746),
    (0.7590742*12.5, -0.0381043),
    (0.7730275*12.5, -0.0363123),
    (0.7868454*12.5, -0.0345014),
    (0.8005122*12.5, -0.0326750),
    (0.8140113*12.5, -0.0308364),
    (0.8273250*12.5, -0.0289893),
    (0.8404347*12.5, -0.0271374),
    (0.8533205*12.5, -0.0252850),
    (0.8659609*12.5, -0.0234364),
    (0.8783331*12.5, -0.0215967),
    (0.8904123*12.5, -0.0197711),
    (0.9021712*12.5, -0.0179654),
    (0.9135802*12.5, -0.0161863),
    (0.9246063*12.5, -0.0144410),
    (0.9352124*12.5, -0.0127377),
    (0.9453566*12.5, -0.0110858),
    (0.9549902*12.5, -0.0094960),
    (0.9640559*12.5, -0.0079808),
    (0.9724844*12.5, -0.0065553),
    (0.9801884*12.5, -0.0052378),
    (0.9870521*12.5, -0.0040523),
    (0.9929085*12.5, -0.0030318),
    (0.9974774*12.5, -0.0022299),
    (1.0000000*12.5, -0.0017850)
]

# Calculate area
area1 = calculate_area1(points1)
area2 = calculate_area2(points2)
print("Area of the closed figure:", area1 + area2)
